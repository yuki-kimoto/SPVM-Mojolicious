# Copyright (c) 2023 Yuki Kimoto
# MIT License

class HTTP::Tiny {
  version "0.011";
  
  use Fn;
  use Re;
  use Hash;
  use Format;
  use Mozilla::CA;
  use Sys;
  use File::Temp;
  use IO::File;
  use Time::Piece;
  
  use HTTP::Tiny::Handle;
  use HTTP::Tiny::Message::Request;
  use HTTP::Tiny::Message::Response;
  use HTTP::Tiny::Response;
  use HTTP::Tiny::Headers;
  use HTTP::Tiny::URL;
  use HTTP::Tiny::CookieJar::Interface;
  use HTTP::Tiny::Headers;
  use HTTP::Tiny::Path;
  use HTTP::Tiny::Parameters;
  use HTTP::Tiny::Asset;
  use HTTP::Tiny::Asset::File;
  use HTTP::Tiny::Asset::Memory;
  
  # Fields
  has agent : rw string;
  
  has cookie_jar : rw HTTP::Tiny::CookieJar::Interface;
  
  has default_headers : rw HTTP::Tiny::Headers;
  
  has local_address : rw string;
  
  has keep_alive : rw byte;
  
  has max_redirect : rw int;
  
  has max_size : rw int;
  
  has timeout : rw double;
  
  has verify_SSL : rw byte;
  
  has SSL_options : rw object[];
  
  has tmp_dir : File::Temp::Dir;
  
  # Class Methods
  static method new : HTTP::Tiny ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $self = new HTTP::Tiny;
    
    # timeout
    my $timeout = $options_h->delete_or_default_double("timeout", 60.0);
    $self->{timeout} = $timeout;
    unless ($timeout >= 0) {
      die "The timeout option must be greater than or equal to 0";
    }
    
    # agent
    my $default_agent = $self->create_default_agent;
    my $agent = $options_h->delete_or_default_string("agent", $default_agent);
    $self->{agent} = $agent;
    
    $self->{tmp_dir} = File::Temp->newdir;
    
    return $self;
  }
  
  static method can_ssl : int ($error_ref : string[] = undef) {
    
    unless ($error_ref) {
      die "\$error_ref must be defined.";
    }
    
    unless (@$error_ref == 1) {
      die "the length of \$error_ref must be 1.";
    }
    
    my $can_ssl = 1;
    my $reason = "";
    
    # Need IO::Socket::SSL 1.42 for SSL_create_ctx_callback
    my $io_socket_ssl_ok = 0;
    if (require IO::Socket::SSL) {
      my $io_socket_ssl_version_number = Fn->get_version_number("IO::Socket::SSL");
      
      if($io_socket_ssl_version_number >= 0.001) {
        $io_socket_ssl_ok = 1;
      }
    }
    
    unless ($io_socket_ssl_ok) {
      $can_ssl = 0;
      $reason .= "IO::Socket::SSL 0.001 must be installed for https support.\n";
    }
    
    my $net_ssleay_ok = 0;
    if (require Net::SSLeay) {
      my $net_ssleay_version_number = Fn->get_version_number("Net::SSLeay");
      
      if($net_ssleay_version_number >= 0.001) {
        $net_ssleay_ok = 1;
      }
    }
    
    unless ($net_ssleay_ok) {
      $can_ssl = 0;
      $reason .= "Net::SSLeay 0.001 must be installed for https support.\n";
    }
    
    $error_ref->[0] = $reason;
    
    return $can_ssl;
  }
  
  method can_ssl_with_verify : int ($error_ref : string[] = undef) {
    
    my $can_ssl = &can_ssl($error_ref);
    
    my $reason = $error_ref->[0];
    
    my $ssl_options_h = Hash->new($self->{SSL_options});
    
    if ($self->{verify_SSL} || $ssl_options_h->get("SSL_verify_mode")) {
      
      my $handle = HTTP::Tiny::Handle->new({
        SSL_options => $self->{SSL_options},
        verify_SSL  => $self->{verify_SSL},
      });
      
      eval { $handle->_find_CA_file; }
      
      if ($@) {
        $can_ssl = 0;
        $reason .= "$@";
      }
    }
    
    $error_ref->[0] = $reason;
    
    return $can_ssl;
  }
  
  # Instance Methods
  method get : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("GET", $url, $options);
    
    return $response;
  }
  
  method head : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("HEAD", $url, $options);
    
    return $response;
  }
  
  method put : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("PUT", $url, $options);
    
    return $response;
  }
  
  method post : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("POST", $url, $options);
    
    return $response;
  }
  
  method patch : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("PATCH", $url, $options);
    
    return $response;
  }
  
  method delete : HTTP::Tiny::Response ($url : string, $options : object[] = undef) {
    
    my $response = $self->request("DELETE", $url, $options);
    
    return $response;
  }
  
  method post_form : HTTP::Tiny::Response ($url : string, $data : object[], $options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    my $headers = (HTTP::Tiny::Headers)$options_h->get_or_default("headers", undef);
    
    my $new_headers = (HTTP::Tiny::Headers)undef;
    if ($headers) {
      $new_headers = $headers->clone;
    }
    else {
      $new_headers = HTTP::Tiny::Headers->new;
    }
    
    $new_headers->remove("content-type");
    
    $new_headers->add("content-type", "application/x-www-form-urlencoded");
    
    $options_h->set("content", $self->www_form_urlencode($data));
    
    $options_h->set("headers", $new_headers);
    
    my $response = $self->request("POST", $url, $options_h->to_array);
    
    return $response;
  }
  
  method www_form_urlencode : string ($name_value_pairs : object[]) {
    
    unless ($name_value_pairs) {
      die "\$name_value_pairs must be defined.";
    }
    
    my $name_value_pairs_length = @$name_value_pairs;
    
    unless ($name_value_pairs_length % 2 == 0) {
      die "The length of \$name_value_pairs_length must be an even number.";
    }
    
    my $terms_list = StringList->new;
    for (my $i = 0; $i < $name_value_pairs_length; $i+= 2) {
      my $key = (string)$name_value_pairs->[$i];
      
      unless ($key) {
        die "The key must be defined.";
      }
      
      my $value = $name_value_pairs->[$i + 1];
      
      unless ($value) {
        die "The value must be defined.";
      }
      
      if ($value isa string) {
        my $value = (string)$value;
        
        my $value_url_escape = &_uri_escape($value);
        $terms_list->push("$key=$value_url_escape");
      }
      elsif ($value isa string[]) {
        my $values = (string[])$value;
        for my $value (@$values) {
          my $value_url_escape = &_uri_escape($value);
          $terms_list->push("$key=$value_url_escape");
        }
      }
      else {
        die "The type of the value must be the string type or the string[] type.";
      }
    }
    
    my $terms = $terms_list->to_array;
    
    my $urlencoded = Fn->join("&", $terms);
    
    return $urlencoded;
  }
  
  private static method _uri_escape : string ($input : string) {
    
    my $input_ref = [$input];
    Re->s($input_ref, "([^A-Za-z0-9\-\._~])", method : string ($re : Regex, $match : Regex::Match) {
      my $bytes = $match->cap1;
      
      my $escaped_char_buffer = StringBuffer->new;
      
      for (my $i = 0; $i < length $bytes; $i++) {
        my $byte = $bytes->[$i];
        my $hex_string = Format->sprintf("%%%02X", [(object)($byte & 0xFF)]);
        $escaped_char_buffer->push($hex_string);
      }
      
      my $escaped_char = $escaped_char_buffer->to_string;
      
      return $escaped_char;
    });
    
    my $output = $input_ref->[0];
    
    return $output;
  }
  
  method create_default_agent : string () {
    
    my $default_agent = "SPVM/HTTP::Tiny";
    
    my $version = Fn->get_version_string("HTTP::Tiny");
    
    $default_agent .= "/$version";
    
    return $default_agent;
  }
  
  private method request : HTTP::Tiny::Response ($method : string, $url_string : string, $options : object[])  {
    
    my $options_h = Hash->new($options);
    
    my $data_callback = $options_h->delete_or_default("data_callback", undef);
    
    my $headers = (HTTP::Tiny::Headers)$options_h->delete_or_default("headers", undef);
    
    my $timeout = $options_h->delete_or_default_double("timeout", $self->{timeout});
    
    for my $name (@{$options_h->keys}) {
      die "The \$name option is not available.";
    }
    
    unless ($headers) {
      $headers = HTTP::Tiny::Headers->new;
    }
    
    unless ($headers->header("user-agent")) {
      my $agent = $self->{agent};
      $headers->add("user-agent" => $agent);
    }
    
    my $url = HTTP::Tiny::URL->new($url_string);
    
    $url->set_port(80);
    
    my $request = HTTP::Tiny::Message::Request->new({
      method    => $method,
      url => $url,
      headers   => $headers,
    });
    
    my $socket  = HTTP::Tiny::Handle->new({
      timeout => $timeout,
      data_callback => $data_callback,
    });
    
    $socket->connect($request);
    
    $socket->write_request($request);
    
    my $response = $socket->read_response;
    
    my $result = HTTP::Tiny::Response->new($response);
    
    return $result;
  }
  
  method _ssl_args : object[] ($host : string) {
    
    my $ssl_args_h = Hash->new;
    
    $ssl_args_h->set(SSL_hostname => $host);
    
    if ($self->{verify_SSL}) {
      $ssl_args_h->set(SSL_verifycn_scheme => "http");
      $ssl_args_h->set(SSL_verifycn_name => $host);
      $ssl_args_h->set(SSL_verify_mode => 0x01);
      $ssl_args_h->set(SSL_ca_file => $self->_find_CA_file);
    }
    else {
      $ssl_args_h->set(SSL_verifycn_scheme => "none");
      $ssl_args_h->set(SSL_verify_mode => 0x00);
    }
    
    my $SSL_options_h = Hash->new($self->{SSL_options});
    
    for my $key (@{$SSL_options_h->keys}) {
      $ssl_args_h->set($key => $SSL_options_h->get($key));
    }
    
    my $ssl_args = $ssl_args_h->to_array;
    
    return $ssl_args;
  }
  
  method _find_CA_file : string () {
      
    my $ssl_options_h = Hash->new($self->{SSL_options});
    
    my $ca_file = $ssl_options_h->get_string("SSL_ca_file");
    
    unless ($ca_file) {
      $ca_file = Sys->env("SSL_CERT_FILE");
    }
    
    unless ($ca_file) {
      my $tmp_dir = $self->{tmp_dir};
      
      my $tmp_dir_name = $tmp_dir->dirname;
      
      my $mozilla_ca_file = "$tmp_dir_name/mozilla_ca_file.pem";
      
      my $io_file = IO::File->new($mozilla_ca_file);
      
      my $ca = Mozilla::CA->SSL_ca;
      
      $io_file->print($ca);
      
      $io_file->close;
      
      $ca_file = $tmp_dir_name;
    }
    
    return $ca_file;
  }
  
  method mirror : HTTP::Tiny::Response ($url : string, $file : string, $options : object[] = undef) {
    
    unless ($file) {
      die "\$file must be defined.";
    }
    
    my $options_h = Hash->new($options);
    
    my $option_headers_object = $options_h->get("headers");
    
    my $option_headers = (HTTP::Tiny::Headers)undef;
    
    if ($option_headers_object is_type HTTP::Tiny::Headers) {
      $option_headers = $option_headers_object->(HTTP::Tiny::Headers)->clone;
    }
    else {
      die "The type of the \"headers\" option must be the object[] type or a HTTP::Tiny::Headers type.";
    }
    
    if (Sys->e($file)) {
      
      my $mtime = Sys->stat($file)->st_mtime;
      
      unless ($option_headers->header("if-modified-since")) {
        $option_headers->add("if-modified-since", &_http_date($mtime));
      }
    }
    
    my $tmp_dir = File::Temp->newdir;
    
    my $tmp_dir_name = $tmp_dir->dirname;
    
    my $tempfile = "$tmp_dir_name/mirror";
    
    my $io_file = IO::File->new($tempfile);
    
    $options_h->set(data_callback => [$io_file : IO::File] method : void ($chunk : string) { $io_file->print($chunk); });
    
    my $result = $self->request("GET", $url, $options_h->to_array);
    
    if ($result->success) {
      Sys->rename($tempfile, $file);
      
      my $lm = $result->headers->header("last-modified");
      
      if ($lm) {
        my $http_date = (HTTP::Tiny::Date)undef;
        eval { $http_date = HTTP::Tiny::Date->new($lm); }
        
        if ($http_date) {
          my $mtime = $http_date->epoch;
          Sys->utime($mtime, $mtime, $file);
        }
      }
    }

=pod TODO

    unless ($response->success) {
      $response->{success} = (byte)($response->{status} == 304);
    }

=cut

    return $result;
  }
 
  static method _http_date : string ($epoch : long) {
    
    my $tp = Time::Piece->gmtime($epoch);
    
    my $http_date = $tp->wdayname . ", " . $tp->strftime("%d") . $tp->monname . $tp->strftime("%04d %02d:%02d:%02d GMT");
    
    return $http_date;
  }
  
}
