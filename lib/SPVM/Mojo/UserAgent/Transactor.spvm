# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::UserAgent::Transactor {
  version_from Mojolicious;
  
  use Mojo::Asset::File;
  use Mojo::Asset::Memory;
  use Mojo::Content::MultiPart;
  use Mojo::Content::Single;
  use Mojo::File;
  use JSON;
  use Mojo::Parameters;
  use Mojo::Transaction::HTTP;
  use Mojo::Transaction::WebSocket;
  use Mojo::URL;
  use Mojo::Util;
  use Mojo::WebSocket;
  use Sys;
  use Mojo::UserAgent::Transactor::Callback::Generator;
  use Mojo::UserAgent::Transactor::Endpoint;
  
  # Fields
  has compressed : rw byte
    get {
      unless (exists $self->{compressed}) {
        $self->{compressed} = (length (my $_ = Sys->env("SPVM_MOJO_GZIP")) ? (byte)$_ : (byte)1);
      }
      
      return $self->{compressed};
    }
  ;
  
  has generators : rw Hash of Mojo::UserAgent::Transactor::Callback::Generator
    get {
      unless (exists $self->{generators}) {
        $self->{generators} = Hash->new({
          form => method : void () { &_form; },
          json => method : void () { &_json; },
          multipart => method : void () { &_multipart; },
        });
      }
      
      return $self->{generators};
    }
  ;
  
  has name : rw string
    get {
      unless (exists $self->{name}) {
        $self->{name} = "Mojolicious (SPVM)";
      }
      
      return $self->{name};
    }
  ;
  
  # Class Methods
  static method new : Mojo::UserAgent::Transactor () {
    
    my $self = new Mojo::UserAgent::Transactor;
    
    return $self;
  }
  
  private static method _form : void () {
    die "Not implemented.";
  }
  
  private static method _json : void () {
    die "Not implemented.";
  }
  
  private static method _multipart : void () {
    die "Not implemented.";
  }
  
  private static method _proxy : Mojo::UserAgent::Transactor::Endpoint ($tx : Mojo::Transaction, $proto : string, $host : string, $port : int) {
    
    my $req = $tx->req;
    if ($req->via_proxy && (my $proxy = $req->proxy)) {
      
      my $proxy_port  = $proxy->port;
      unless ($proxy_port > 0) {
        $proxy_port = $proto eq "https" ? 443 : 80;
      }
      
      my $endpoint = Mojo::UserAgent::Transactor::Endpoint->new;
      $endpoint->set_protocol($proxy->protocol);
      $endpoint->set_host($proxy->ihost);
      $endpoint->set_port($proxy_port);
      
      return $endpoint;
    }
    
    my $endpoint = Mojo::UserAgent::Transactor::Endpoint->new;
    $endpoint->set_protocol($proto);
    $endpoint->set_host($host);
    $endpoint->set_port($port);
    
    return $endpoint;
  }
  
  # Instance Methods
  method add_generator : void ($name : string, $cb : Mojo::UserAgent::Transactor::Callback::Generator) {
    
    $self->{generators}->set($name, $cb);
  }
  
  method tx : Mojo::Transaction::HTTP ($method : string, $url : string|Mojo::URL, $args1 : object = undef, $args2 : object = undef) {
    
    # Method and URL
    my $tx  = Mojo::Transaction::HTTP->new;
    my $req = $tx->req;
    
    $req->set_method($method);
    
    if ($url isa Mojo::URL) {
      $req->set_url((Mojo::URL)$url);
    }
    else {
      if (Re->m($url, "^/|://")) {
        $req->url->parse((string)$url);
      }
      else {
        $req->url->parse("http://" . (string)$url);
      }
    }
    
    # Headers (we identify ourselves and accept gzip compression)
    my $headers = $req->headers;
    
    my $args1_used = 0;
    if (is_options $args1) {
      $headers->from_hash(Hash->new((object[])$args1));
      $args1_used = 1;
    }
    
    unless ($headers->user_agent) {
      $headers->set_user_agent($self->name);
    }
    if    (!$self->compressed)         { $tx->res->content->set_auto_decompress(0); }
    elsif (!$headers->accept_encoding) { $headers->set_accept_encoding("gzip"); }
    
    if ($args1_used) {
      $args1 = $args2;
    }
    
    # Generator
    if ($args1 isa object[] && !(is_options $args1)) {
      my $generator_args = (object[])$args1;
      
      my $name = $args1->(object[])->[0]->(string);
      
      my $cb = (Mojo::UserAgent::Transactor::Callback::Generator)$self->{generators}->get($name);
      
      if (@$generator_args > 1) {
        $cb->($self, $tx, $generator_args->[1]);
      }
      elsif (@$generator_args > 2) {
        $cb->($self, $tx, $generator_args->[1], $generator_args->[2]);
      }
      elsif (@$generator_args > 3) {
        $cb->($self, $tx, $generator_args->[1], $generator_args->[2], $generator_args->[3]);
      }
      else {
        die "Too many argument for a generator.";
      }
    }
    else {
      $req->set_body((string)$args1);
    }
    
    return $tx;
  }
  
  method proxy_connect : Mojo::Transaction::HTTP ($old : Mojo::Transaction::HTTP) {
   
    # Already a CONNECT request
    my $req = $old->req;
    if (Fn->uc($req->method) eq "CONNECT") {
      return undef ;
    }
    
    # No proxy
    my $proxy = $req->proxy;
    unless ($proxy && $req->via_proxy) {
      return undef;
    }
    if ($proxy->protocol eq "socks") {
      return undef;
    }
    
    # WebSocket and/or HTTPS
    my $url = $req->url;
    unless ($req->is_handshake || $url->protocol eq "https") {
      return undef ;
    }
    
    # CONNECT request (expect a bad response)
    my $new_url = $url->clone;
    $new_url->set_userinfo(undef);
    my $new = $self->tx(CONNECT => $new_url);
    $new->req->set_proxy($proxy);
    my $new_res_content = $new->res->content;
    $new_res_content->set_auto_relax(0);
    $new_res_content->headers->set_connection("keep-alive");
    
    return $new;
  }
  
  method redirect : Mojo::Transaction::HTTP ($old : Mojo::Transaction::HTTP) {
    
    # Commonly used codes
    my $res  = $old->res;
    my $code = $res->code;
    
    unless (@{Fn->grep([$code : int] method : int ($_ : object) { return $_->(int) == $code; }, [(Int)301, 302, 303, 307, 308])}) {
      return undef ;
    }
    
    # CONNECT requests cannot be redirected
    my $req = $old->req;
    
    if (Fn->uc($req->method) eq "CONNECT") {
      return undef ;
    }
    
    # Fix location without authority and/or scheme
    my $location = $res->headers->header("Location");
    unless (length $location) {
      return undef;
    }
    
    my $location_url = Mojo::URL->new($location);
    unless ($location_url->is_abs) {
      $location_url->set_base($req->url);
      $location_url = $location_url->to_abs;
    }
    my $proto = $location_url->protocol;
    if (($proto ne "http" && $proto ne "https") || !$location_url->host) {
      return undef;
    }
    
    # Clone request if necessary
    my $new = Mojo::Transaction::HTTP->new;
    if ($code == 307 || $code == 308) {
      my $clone = $req->clone;
      unless ($clone) {
        return undef;
      }
      $new->set_req($clone);
    }
    else {
      my $method = Fn->uc($req->method);
      $method = $code == 303 || $method eq "POST" ? "GET" : $method;
      
      my $new_req = $new->req;
      $new_req->set_method($method);
      my $headers = $req->headers->clone;
      $new_req->content->set_headers($headers);
      
      for my $_ (@{$headers->names}) {
        if (Re->m($_, ["^content-", "i"])) {
          $headers->remove($_) ;
        }
      }
    }
    
    unless ($self->compressed) {
      $new->res->content->set_auto_decompress(0);
    }
    
    my $new_req = $new->req;
    $new_req->set_url($location_url);
    my $headers = $new_req->headers;
    
    for my $_ (@{["Authorization", "Cookie", "Host", "Referer"]}) {
      $headers->remove($_) ;
    }
    
    $new->set_previous($old);
    
    return $new;
  }
  
  method endpoint : Mojo::UserAgent::Transactor::Endpoint ($tx : Mojo::Transaction) {
    
    # Basic endpoint
    my $req   = $tx->req;
    my $url   = $req->url;
    my $proto = $url->protocol // "http";
    my $host  = $url->ihost;
    my $port  = $url->port;
    unless ($port > 0) {
      $port = $proto eq "https" ? 443 : 80;
    }
    
    # Proxy for normal HTTP requests
    my $socks = 0;
    if (my $proxy = $req->proxy) {
      $socks = $proxy->protocol eq "socks";
    }
    
    if ($proto eq "http" && !$req->is_handshake && !$socks) {
      return &_proxy($tx, $proto, $host, $port) ;
    }
    
    my $endpoint = Mojo::UserAgent::Transactor::Endpoint->new;
    $endpoint->set_protocol($proto);
    $endpoint->set_host($host);
    $endpoint->set_port($port);
    
    return $endpoint;
  }
  
  method upgrade : Mojo::Transaction::WebSocket ($tx : Mojo::Transaction::HTTP) {
    
    my $code = $tx->res->code;
    
    unless ($tx->req->is_handshake && $code == 101) {
      return undef;
    }
    
    my $ws = Mojo::Transaction::WebSocket->new;
    $ws->set_handshake($tx);
    $ws->set_masked(1);
    
    my $challenge = Mojo::WebSocket->challenge($ws);
    
    unless ($challenge) {
      return undef;
    }
    
    $ws->set_established(1);
    
    return $ws;
  }
  
  method peer : Mojo::UserAgent::Transactor::Endpoint ($tx : Mojo::Transaction::HTTP) {
    
    my $endpoint = $self->endpoint($tx);
    my $proto = $endpoint->protocol;
    my $host = $endpoint->host;
    my $port = $endpoint->port;
    
    return &_proxy($tx, $proto, $host, $port);
  }
  
}
