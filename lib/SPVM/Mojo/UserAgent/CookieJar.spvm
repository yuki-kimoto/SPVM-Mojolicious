# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::UserAgent::CookieJar {
  version_from Mojolicious;
  
  use Mojo::Cookie::Response;
  use Mojo::File;
  use Mojo::Path;
  use Mojo::UserAgent::CookieJar::Callback::Ignore;
  
  # Interfaces
  interface Stringable;
  
  # Class Variables
  our $COMMENT : string;
  INIT {
    $COMMENT = "# Netscape HTTP Cookie File\n# This file was generated by SPVM::Mojolicious! Edit at your own risk.\n\n";
  }
  
  # Fields
  has ignore : rw Mojo::UserAgent::CookieJar::Callback::Ignore;
  
  has max_cookie_size : rw int
    get {
      unless (exists $self->{max_cookie_size}) {
        $self->{max_cookie_size} = 4096;
      }
      
      return $self->{max_cookie_size};
    }
  ;
  
  # Undocumented Fields
  has jar : Hash of List of Mojo::Cookie::Response;
  
  # Class Methods
  static method new : Mojo::UserAgent::CookieJar () {
    
    my $self = new Mojo::UserAgent::CookieJar;
    
    $self->{jar} = Hash->new;
    
    return $self;
  }
  
  private static method _compare : int ($cookie : Mojo::Cookie::Response, $path : string, $name : string, $domain : string) {
    
    return $cookie->path ne $path || $cookie->name ne $name || $cookie->domain ne $domain;
  }
  
  private static method _path : int ($path : string, $path_abs_string : string) {
    return $path eq "/" || $path eq $path_abs_string || Fn->index($path_abs_string, "$path/") == 0;
  }
  
  # Instance Methods
  method add : void ($cookie : Mojo::Cookie::Response|Mojo::Cookie::Response[]) {
    
    if ($cookie isa Mojo::Cookie::Response) {
      $self->_add([(Mojo::Cookie::Response)$cookie]);
    }
    elsif ($cookie isa Mojo::Cookie::Response[]) {
      $self->_add((Mojo::Cookie::Response[])$cookie);
    }
    else {
      die "The cookie \$cookie must be a Mojo::Cookie::Response object or a Mojo::Cookie::Response array.";
    }
  }
  
  method all : Mojo::Cookie::Response[] () {
    my $jar = $self->{jar};
    
    my $keys = $jar->keys;
    
    Sort->sort_string_asc($keys);
    
    my $all_cookies_list = List->new(new Mojo::Cookie::Response[0]);
    
    for my $key (@$keys) {
      my $jar_list = (List of Mojo::Cookie::Response)$jar->get($key);
      $all_cookies_list->push_($jar_list->to_array);
    }
    
    return (Mojo::Cookie::Response[])$all_cookies_list->to_array;
  }
  
  method collect : void ($tx : Mojo::Transaction::HTTP) {
    
    my $url = $tx->req->url;
    for my $cookie (@{$tx->res->cookies}) {
      
      # Validate domain
      my $host = Fn->lc($url->ihost);
      unless ($cookie->domain) {
        $cookie->set_domain($host);
        $cookie->set_host_only(1);
      }
      my $domain = Fn->lc($cookie->domain);
      if (my $cb = $self->ignore) {
        if ($cb->($cookie)) {
          next ;
        }
      }
      
      if ($host ne $domain && (!Re->m($host, "\Q.$domain\E$") || Re->m($host, "\.\d+$"))) {
        next ;
      }
      
      # Validate path
      my $path = Mojo::Path->new($cookie->path // $url->path->to_dir->to_abs_string);
      $path->set_trailing_slash(0);
      unless (&_path($path->to_string, $path->to_abs_string)) {
        next;
      }
      
      $cookie->set_path($path->to_string);
      
      $self->add($cookie);
    }
  }
  
  method empty : void () {
    
    $self->{jar} = Hash->new;
  }
  
  method find : Mojo::Cookie::Request[] ($url : Mojo::URL) {
    
    my $found = List->new(new Mojo::Cookie::Request[0]);
    my $domain = my $host = Fn->lc($url->ihost);
    my $path   = $url->path->to_abs_string;
    
    for (my $tmp = 0; 1 ; (Re->s(my $_ = [$domain], "^[^.]*\.*", ""), $domain = $_->[0])) {
      
      unless (length $domain) {
        last;
      }
      
      my $old = (List of Mojo::Cookie::Response)$self->{jar}->get($domain);
      unless ($old) {
        next ;
      }
      
      # Grab cookies
      my $new = List->new(new Mojo::Cookie::Response[0]);
      $self->{jar}->set($domain, $new);
      for my $cookie (@{(Mojo::Cookie::Response[])$old->to_array}) {
        if ($cookie->host_only && $host ne $cookie->domain) {
          next;
        }
        
        # Check if cookie has expired
        my $expires = $cookie->expires;
        if ($expires >= 0) {
          if (Sys->time > $expires) {
            next;
          }
        }
        $new->push($cookie);
        
        # Taste cookie
        if ($cookie->secure && $url->protocol ne "https") {
          next;
        }
        unless (&_path($cookie->path, $path)) {
          next;
        }
        my $name  = $cookie->name;
        my $value = $cookie->value;
        
        $found->push((my $_ = Mojo::Cookie::Request->new, $_->set_name($name), $_->set_value($value), $_));
      }
    }
    
    return $found->to_array->(Mojo::Cookie::Request[]);
  }
  
  method prepare : void ($tx : Mojo::Transaction::HTTP) {
    
    unless (@{$self->{jar}->keys}) {
      return;
    }
    
    my $req = $tx->req;
    
    $req->set_cookies($self->find($req->url));
  }
  
  method to_string : string () {
    
    my $lines = StringList->new;
    for my $cookie (@{$self->all}) {
      my $line = [(string)
        $cookie->domain, $cookie->host_only ? "FALSE" : "TRUE",
        $cookie->path,   $cookie->secure    ? "TRUE"  : "FALSE",
        $cookie->expires < 0 ? $cookie->expires : (long)0, $cookie->name,
        $cookie->value
      ];
      $lines->push(Fn->join("\t", $line));
    }
    
    $lines->push("");
    
    return Fn->join("\n", $lines->to_array);
  }
  
  private method _add : void ($cookies : Mojo::Cookie::Response[]) {
    
    my $size = $self->max_cookie_size;
    for my $cookie (@$cookies) {
      
      # Convert max age to expires
      my $age = $cookie->max_age;
      if (Re->m($age, "^\d+$")) {
        my $age_int = (int)$age;
        $cookie->set_expires($age <= 0 ? (long)0 : $age + Sys->time) ;
      }
      
      # Check cookie size
      if (length $cookie->value > $size) {
        next;
      }
      
      # Replace cookie
      my $domain = Fn->lc($cookie->domain // "");
      unless (length $domain) {
        next;
      }
      my $path = $cookie->path;
      unless (length $path) {
        next;
      }
      my $name = $cookie->name;
      unless (length $name) {
        next;
      }
      
      my $jar_list = (List of Mojo::Cookie::Response)$self->{jar}->get($domain);
      
      unless ($jar_list) {
        $jar_list = List->new(new Mojo::Cookie::Response[0]);
      }
      
      my $replaced = 0;
      for (my $i = 0; $i < $jar_list->length; $i++) {
        my $cookie_cur = (Mojo::Cookie::Response)$jar_list->get($i);
        if (&_compare($cookie_cur, $path, $name, $domain)) {
          $jar_list->set($i, $cookie);
          $replaced = 1;
          last;
        }
      }
      
      unless ($replaced) {
        $jar_list->push($cookie);
      }
      
      $self->{jar}->set($domain, $jar_list);
    }
    
  }
  
}

