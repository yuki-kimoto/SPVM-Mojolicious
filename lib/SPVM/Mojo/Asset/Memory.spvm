# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Asset::Memory extends Mojo::Asset {
  version_from Mojo;
  
  use Mojo::Asset::File;
  use IO;
  
  # Fields
  has auto_upgrade : rw byte;
  
  has max_memory_size : wo int;
  
  method max_memory_size : int () {
    
    unless ($self->{max_memory_size} > -1) {
      my $env_max_memory_size = length(my $_ = Sys->env("SPVM_MOJO_MAX_MEMORY_SIZE")) ? (int)$_ : -1;
      
      $self->{max_memory_size} = $env_max_memory_size;
      
      unless ($self->{max_memory_size} < -1) {
        $self->{max_memory_size} = 262144;
      }
    }
    
    return $self->{max_memory_size};
  }
  
  has mtime : wo long;
  
  method mtime : long () {
    
    unless ($self->{mtime} > -1) {
      $self->{mtime} = CommandInfo->BASETIME;
    }
    
    return $self->{mtime};
  }
  
  # Undocumented Fields
  has content_buffer : StringBuffer;
  
  has frozen : byte;
  
  # Class Methods
  static method new : Mojo::Asset::Memory () {
    
    my $self = new Mojo::Asset::Memory;
    
    $self->init;
    
    return $self;
  }
  
  # Instance Methods
  protected method init : void () {
    
    $self->SUPER::init;
    
    $self->{max_memory_size} = -1;
    
    $self->{mtime} = -1;
    
    $self->{content_buffer} = StringBuffer->new;
    
  }
  
  method add_chunk : Mojo::Asset ($chunk : string) {
    
    unless ($chunk) {
      die "The chunk \$chunk must be defined.";
    }
    
    if ($self->{frozen}) {
      die "Asset has been upgraded and is now frozen.";
    }
    
    if ($self->auto_upgrade && ($self->size + length $chunk) > $self->max_memory_size) {
      my $file = Mojo::Asset::File->new;
      
      $self->emit(upgrade => $file);
      
      $self->{frozen} = 1;
      
      $file->add_chunk($self->slurp . $chunk);
      
      return $file;
    }
    
    $self->{content_buffer}->push($chunk);
    
    return $self;
  }
  
  method contains : int ($string : string) {
    
    my $start = $self->start_range;
    
    unless ($start <= Fn->INT_MAX) {
      die "The start_range field must be less than or equal to Fn->INT_MAX.";
    }
    
    my $end = $self->end_range;
    
    unless ($end <= Fn->INT_MAX) {
      die "The end_range field must be less than or equal to Fn->INT_MAX.";
    }
    
    my $pos = Fn->index($self->{content_buffer}->to_string, $string, (int)$start);
    
    if ($start && $pos >= 0) {
      $pos -= $start;
    }
    
    if ($end >= 0 && ($pos + length $string) >= $end) {
      $pos = -1;
    }
    
    return $pos;
  }
  
  method get_chunk : string ($offset : long, $max : int = -1) {
    
    unless ($max > -1) {
      $max = 131072;
    }
    
    my $start = $self->start_range;
    
    unless ($start <= Fn->INT_MAX) {
      die "The start_range field must be less than or equal to Fn->INT_MAX.";
    }
    
    my $end = $self->end_range;
    
    unless ($end <= Fn->INT_MAX) {
      die "The end_range field must be less than or equal to Fn->INT_MAX.";
    }
    
    unless ($offset <= Fn->INT_MAX) {
      die "The offset \$offset must be less than or equal to Fn->INT_MAX.";
    }
    
    $offset += $start;
    
    if ($end >= 0) {
      if (($offset + $max) > $end) {
        $max = (int)$end + 1 - (int)$offset;
      }
    }
    
    return $self->{content_buffer}->substr((int)$offset, $max);
  }
  
  method move_to : void ($file : string) {
    
    my $content = $self->{content_buffer}->to_string;
    
    my $fh = IO->open(">", $file);
    
    $fh->print($content);
  }
  
  method size : long () {
    return $self->{content_buffer}->length;
  }
  
  method slurp : string () {
    
    my $content = $self->{content_buffer}->to_string;
    
    return $content;
  }
  
  method to_file : Mojo::Asset::File () {
    
    my $file = Mojo::Asset::File->new;
    
    $file->add_chunk($self->slurp);
    
    return $file;
  }
  
}
