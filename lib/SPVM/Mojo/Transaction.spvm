# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Transaction extends Mojo::EventEmitter {
  version_from Mojolicious;
  
  use Mojo::Message::Request;
  use Mojo::Message::Response;
  use Mojo::Util;
  use Hash;
  
  # Fields
  has kept_alive : rw byte;
  
  has local_address : rw string;
  
  has local_port : rw int;
  
  has original_remote_address : rw string;
  
  has remote_port : rw int;
  
  has req : rw Mojo::Message::Request;
  
  has res : rw Mojo::Message::Response;
  
  has completed : byte;
  
  has connection : ro int;
  
  # The handle is stored in a transaction object instead that Mojolicious stores it in a user agent object.
  has handle : rw IO::Socket;
  
  # Class Methods
  static method new : Mojo::Transaction () {
    
    my $self = new Mojo::Transaction;
    
    $self->init;
    
    return $self;
  }
  
  protected method init : void ($options : object[] = undef) {
    
    $self->{req} = Mojo::Message::Request->new;
    
    $self->{res} = Mojo::Message::Response->new;
  }
  
  # Instance Methods
  method client_read : void ($chunk : string) { die "Not implemented."; }
  
  method client_write : string ($server : int) { die "Not implemented."; }
  
  method closed : void () {
    
    $self->completed;
    
    $self->emit("finish");
  }
  
  method completed : void () {
    $self->{completed} = 1;
  }
  
  method set_connection : void ($id : int) {
    
    $self->{connection} = $id;
    
    $self->emit(connection => $id);
    
  }
  
  method is_finished : int () {
    
    return !!$self->{completed};
  }
  
  method is_websocket : int () {
    die "Not implemented.";
  }
  
  method remote_address : string () {
    
    unless ($self->req->reverse_proxy) {
      return $self->original_remote_address;
    }
    
    my $x_forwarded_for = $self->req->headers->header("X-Forwarded-For");
    unless ($x_forwarded_for) {
      $x_forwarded_for = "";
    }
    
    my $addrs   = Re->split("\s*,\s*", $x_forwarded_for);
    my $trusted = $self->req->trusted_proxies;
    
    unless (@$trusted) {
      if (@$addrs) {
        return $addrs->[@$addrs - 1];
      }
      else {
        return $self->original_remote_address;
      }
    }
    
    $addrs = Array->merge_string($addrs, [$self->original_remote_address]);
    
    Fn->reverse_inplace($addrs);
    
    for my $addr (@$addrs) {
      my $matches = Fn->grep([$addr : string] method : int ($_ : string) { return Mojo::Util->network_contains($_, $addr); }, $trusted);
      
      unless (@$matches) {
        return $addr ;
      }
    }
    
    return $addrs->[0];
  }
  
  method set_remote_address : void ($remote_address : string) {
    
    $self->{original_remote_address} = $remote_address;
  }
  
  method result : Mojo::Message::Response () {
    
    my $result = $self->res;
    
    return $result;
  }
  
  method server_read : void ($chunk : string) { die "Not implemented."; }
  
  method server_write : string ($server : int) { die "Not implemented."; }

}

