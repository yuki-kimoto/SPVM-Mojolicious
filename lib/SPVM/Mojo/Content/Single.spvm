# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Content::Single extends Mojo::Content {
  version_from Mojolicious;
  
  allow Mojo::Content::MultiPart;
  
  use Mojo::Asset::Memory;
  use Mojo::Content::MultiPart;
  
  # Fields
  has asset : rw Mojo::Asset;
  
  has auto_upgrade : ro byte;
  
  # Undocumented Fields
  has read : Mojo::EventEmitter::Callback;
  
  has body_size : int;
  
  static method new : Mojo::Content::Single ($options : object[] = undef) {
    
    my $self = new Mojo::Content::Single;
    
    $self->{auto_upgrade} = 1;
    
    my $asset = Mojo::Asset::Memory->new;
    $asset->set_auto_upgrade(1);
    $self->{asset} = $asset;
    
    
    $self->init($options);
    
    $self->{read} = method : void ($that : Mojo::Content::Single, $chunk : string){
      $that->set_asset($that->asset->add_chunk($chunk));
    };
    
    $self->on(read => $self->{read});
    
    return $self;
  }
  
  method body_contains : int ($chunk : string) {
  
    return $self->asset->contains($chunk) >= 0;
  }
  
  method body_size : int () {
    
    if ($self->is_dynamic) {
      my $content_length = $self->headers->content_length;
      my $body_size = 0;
      eval { $body_size = Fn->to_int($content_length); };
      
      return $body_size;
    }
    
    $self->{body_size} = (int)$self->asset->size;
    
    return $self->{body_size};
  }
  
  method clone : Mojo::Content::Single () {
    
    my $clone = (Mojo::Content::Single)$self->SUPER::clone;
    unless ($clone) {
      return undef;
    }
    
    $clone->{asset} = $self->asset;
    
    return $clone;
  }
  
  method get_body_chunk : string ($offset : int) {
    
    if ($self->is_dynamic) {
      return $self->generate_body_chunk($offset) ;
    }
    
    return $self->asset->get_chunk($offset);
  }
  
  method parse : Mojo::Content ($chunk : string) {
    
    # Parse headers
    $self->_parse_until_body($chunk);
    
    # Parse body
    unless ($self->auto_upgrade && $self->boundary) {
      $self->SUPER::parse(undef);
      return (Mojo::Content)$self;
    }
    
    # Content needs to be upgraded to multipart
    $self->unsubscribe(read => $self->{read});
    
    my $multi = Mojo::Content::MultiPart->new_from_single($self);
    
    $self->emit(upgrade => $multi);
    
    $multi->parse(undef);
    
    return (Mojo::Content)$multi;
  }
  
  method is_multipart : int () {
    return 0;
  }
  
}
