# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::WebSocket {
  version_from Mojolicious;
  
  use Mojo::Transaction::WebSocket;
  use Mojo::WebSocket::Frame;
  
  enum {
    WS_CONTINUATION = 0x0,
    WS_TEXT = 0x1,
    WS_BINARY = 0x2,
    WS_CLOSE = 0x8,
    WS_PING = 0x9,
    WS_PONG = 0xa,
  }
  
  static method build_frame : string  ($frame : Mojo::WebSocket::Frame) {

=pod

    warn "-- Building frame ($fin, $rsv1, $rsv2, $rsv3, $op)\n" if DEBUG;

    # Head
    my $head = $op + ($fin ? 128 : 0);
    $head |= 0b01000000 if $rsv1;
    $head |= 0b00100000 if $rsv2;
    $head |= 0b00010000 if $rsv3;
    my $frame = pack 'C', $head;

    # Small payload
    my $len = length $payload;
    if ($len < 126) {
      warn "-- Small payload ($len)\n@{[dumper $payload]}" if DEBUG;
      $frame .= pack 'C', $masked ? ($len | 128) : $len;
    }

    # Extended payload (16-bit)
    elsif ($len < 65536) {
      warn "-- Extended 16-bit payload ($len)\n@{[dumper $payload]}" if DEBUG;
      $frame .= pack 'Cn', $masked ? (126 | 128) : 126, $len;
    }

    # Extended payload (64-bit with 32-bit fallback)
    else {
      warn "-- Extended 64-bit payload ($len)\n@{[dumper $payload]}" if DEBUG;
      $frame .= pack 'C', $masked ? (127 | 128) : 127;
      $frame .= MODERN ? pack('Q>', $len) : pack('NN', 0, $len & 0xffffffff);
    }

    # Mask payload
    if ($masked) {
      my $mask = pack 'N', int(rand 9 x 7);
      $payload = $mask . xor_encode($payload, $mask x 128);
    }

    return $frame . $payload;

=cut

  }

  static method challenge : string ($tx : Mojo::Transaction::WebSocket) {
=pod

    my $tx = shift;
    
    # "permessage-deflate" extension
    my $headers = $tx->res->headers;
    $tx->compressed(1) if ($headers->sec_websocket_extensions // '') =~ /permessage-deflate/;
    
    return _challenge($tx->req->headers->sec_websocket_key) eq $headers->sec_websocket_accept;

=cut

  }
  
  private static method _challenge : string ($sec_websocket_key : string) {
    
=pod

    b64_encode(sha1_bytes(($_[0] || '') . GUID), '')

=cut

  }

  static method parse_frame : object[] ($buffer_ref : string[], $max : int) {
=pod
    my ($buffer, $max) = @_;

    # Head
    return undef unless length $$buffer >= 2;
    my ($first, $second) = unpack 'C2', $$buffer;

    # FIN
    my $fin = ($first & 0b10000000) == 0b10000000 ? 1 : 0;

    # RSV1-3
    my $rsv1 = ($first & 0b01000000) == 0b01000000 ? 1 : 0;
    my $rsv2 = ($first & 0b00100000) == 0b00100000 ? 1 : 0;
    my $rsv3 = ($first & 0b00010000) == 0b00010000 ? 1 : 0;

    # Opcode
    my $op = $first & 0b00001111;
    warn "-- Parsing frame ($fin, $rsv1, $rsv2, $rsv3, $op)\n" if DEBUG;

    # Small payload
    my ($hlen, $len) = (2, $second & 0b01111111);
    if ($len < 126) { warn "-- Small payload ($len)\n" if DEBUG }

    # Extended payload (16-bit)
    elsif ($len == 126) {
      return undef unless length $$buffer > 4;
      $hlen = 4;
      $len  = unpack 'x2n', $$buffer;
      warn "-- Extended 16-bit payload ($len)\n" if DEBUG;
    }

    # Extended payload (64-bit with 32-bit fallback)
    elsif ($len == 127) {
      return undef unless length $$buffer > 10;
      $hlen = 10;
      $len  = MODERN ? unpack('x2Q>', $$buffer) : unpack('x2x4N', $$buffer);
      warn "-- Extended 64-bit payload ($len)\n" if DEBUG;
    }

    # Check message size
    return 1 if $len > $max;

    # Check if whole packet has arrived
    $len += 4 if my $masked = $second & 0b10000000;
    return undef if length $$buffer < ($hlen + $len);
    substr $$buffer, 0, $hlen, '';

    # Payload
    my $payload = $len ? substr($$buffer, 0, $len, '') : '';
    $payload = xor_encode($payload, substr($payload, 0, 4, '') x 128) if $masked;
    warn dumper $payload if DEBUG;

    return [$fin, $rsv1, $rsv2, $rsv3, $op, $payload];
=cut

  }
}
