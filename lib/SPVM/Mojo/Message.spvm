# Copyright (c) 2023 [--user-name]
# MIT License

class Mojo::Message extends Mojo::EventEmitter {
  
  version_from Mojolicious;
  
  use Hash;
  use Mojo::Headers;
  use Mojo::Upload;
  use Mojo::Asset::Memory;
  use Mojo::Content::Single;
  use Mojo::Parameters;
  use Mojo::Upload;
  use JSON;
  
  # Fields
  has content : ro Mojo::Content;
  
  has max_line_size : wo int;
  
  method max_line_size : int () {
    
    unless ($self->{max_line_size} > -1) {
      my $env_max_line_size = length(my $_ = Sys->env("SPVM_MOJO_MAX_LINE_SIZE")) ? (int)$_ : -1;
      
      $self->{max_line_size} = $env_max_line_size;
      
      unless ($self->{max_line_size} > -1) {
        $self->{max_line_size} = 8192;
      }
    }
    
    return $self->{max_line_size};
  }
  
  has max_message_size : wo int;
  
  method max_message_size : int () {
    
    unless ($self->{max_message_size} > -1) {
      my $env_max_message_size = length(my $_ = Sys->env("SPVM_MOJO_MAX_MESSAGE_SIZE")) ? (int)$_ : -1;
      
      $self->{max_message_size} = $env_max_message_size;
      
      unless ($self->{max_message_size} > -1) {
        $self->{max_message_size} = $self->MAX_MESSAGE_SIZE_DEFAULT;
      }
    }
    
    return $self->{max_message_size};
  }
  
  protected method MAX_MESSAGE_SIZE_DEFAULT : int () {
    return 16777216;
  }
  
  has version : ro string;
  
  has error : ro Hash;
  
  # Undocumented Fields
  has state : string;
  
  has finished : byte;
  
  has fix : byte;
  
  has body_params : Mojo::Parameters;
  
  has limit : byte;
  
  has json : object;
  
  has raw_size : int;
  
  has buffer : string;
  
  has _cache : Hash;
  
  # Old Fields
  has content_buffer : rw StringBuffer;
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    $self->{version} //= "1.1";
    
    $self->{max_message_size} = -1;
    
    $self->{max_line_size} = -1;
    
    $self->{content} = Mojo::Content::Single->new;
    
    $self->{_cache} = Hash->new;
    
    $self->{buffer} = "";
  }
  
  method content_v0 : string () {
    return $self->{content_buffer}->to_string;
  }
  
  method body : string () {
    
    my $content = $self->content;
    
    return $content->is_multipart ? "" : $content->(Mojo::Content::Single)->asset->slurp;
  }
  
  method set_body : void ($body : string) {
    
    my $content = $self->content;
    if ($content->is_multipart) {
      my $content = Mojo::Content::Single->new;
      $self->{content} = $content;
      my $asset = Mojo::Asset::Memory->new;
      $asset->add_chunk($body);
      $content->set_asset($asset);
    }
    
  }
  
  method body_params : Mojo::Parameters () {
    
    if ($self->{body_params}) {
      return $self->{body_params};
    }
    
    my $params = $self->{body_params} = Mojo::Parameters->new;
    
    # "application/x-www-form-urlencoded"
    my $type = $self->headers->content_type // "";
    if (Re->m($type, ["application/x-www-form-urlencoded", "i"])) {
      $params->parse($self->content->(Mojo::Content::Single)->asset->slurp);
    }
    
    # "multipart/form-data"
    elsif (Re->m($type, ["multipart/form-data", "i"])) {
      my $formdata = $self->_parse_formdata;
      for my $_ (@$formdata) {
        $params->append([$_->(object[])->[0], $_->(object[])->[1]]);
      }
    }
    
    return $params;
  }
  
  method _parse_formdata : object[] ($upload : int = 0) {
    
  }
  
  method body_size : int () {
    
    return $self->content->body_size;
  }
  
  method build_body : string () {
    
    return $self->_build("get_body_chunk");
  }
  
  method build_headers : string () {
    
    return $self->_build("get_header_chunk");
  }
  
  method build_start_line : string () {
    
    return $self->_build("get_start_line_chunk");
  }
  
  method cookie : Mojo::Cookie ($name : string) {
    
    return (Mojo::Cookie)$self->_cache("cookies", 0, $name);
  }
  
  method cookies : Mojo::Cookie[] () { die "Not implemented."; }
  
  method set_error : void ($error : Hash) {
    
    $self->{error} = $error;
    
    $self->finish;
  }
  
  method every_cookie : Mojo::Cookie[] ($name : string) {
    return (Mojo::Cookie[])$self->_cache("cookies", 1, $name);
  }
  
  method every_upload : Mojo::Upload[] ($name : string) {
    return (Mojo::Upload[])$self->_cache("uploads", 1, $name);
  }
  
  method extract_start_line : int ($str_ref : string[]) { die "Not implemented."; }
  
  method finish : void () {
    
    $self->{state} = "finished";
    
    unless ($self->{finished}) {
      
      $self->emit("finish");
      $self->{finished}++;
    }
  }
  
  method fix_headers : void () {
    
    if ($self->{fix}++) {
      return;
    }
    
    # Content-Length or Connection (unless chunked transfer encoding is used)
    my $content = $self->content;
    my $headers = $content->headers;
    if    ($content->is_multipart)                           { $headers->remove("Content-Length"); }
    elsif ($content->is_chunked || $headers->content_length) { return; }
    if    ($content->is_dynamic)                             { $headers->set_connection("close"); }
    else                                                     { $headers->set_content_length($self->body_size); }
  }
  
  method get_body_chunk : string ($offset : int) {
    
    $self->emit(progress => "body", $offset);
    my $chunk = $self->content->get_body_chunk($offset);
    if (!$chunk || length $chunk) {
      return $chunk;
    }
    
    $self->finish;
    
    return $chunk;
  }
  
  method get_header_chunk : string ($offset : int) {
    
    $self->emit(progress => "headers", $offset);
    
    $self->fix_headers;
    
    my $chunk = $self->content->get_header_chunk($offset);
    
    return $chunk;
  }
  
  method get_start_line_chunk : string ($offset : int) { die "Not implemented."; }
  
  method header_size : int () {
    
    $self->fix_headers;
    
    return $self->content->header_size;
  }
  
  method headers : Mojo::Headers () {
    return $self->content->headers;
  }
  
  method is_finished : int () {
    
    return ($self->{state} // "") eq "finished";
  }
  
  method is_limit_exceeded : int () { return $self->{limit}; }
  
  method json : object () {
    
    if ($self->content->is_multipart) {
      return undef;
    }
    
    my $data = $self->{json} //= JSON->new->decode($self->body);
    
    return $data;
  }
  
  method parse : void ($chunk : string) {
    
    if ($self->{error}) {
      return;
    }
    
    $self->{raw_size} += length $chunk;
    
    $self->{buffer} .= $chunk;
    
    # Start-line
    unless ($self->{state}) {
      
      # Check start-line size
      my $len = Fn->index($self->{buffer}, "\x0a");
      if ($len < 0) {
        $len = length $self->{buffer};
      }
      
      if ($len > $self->max_line_size) {
        $self->_limit("Maximum start-line size exceeded");
        return;
      }
      my $buffer_ref = [$self->{buffer}];
      if ($self->extract_start_line($buffer_ref)) {
        $self->{state} = "content";
      }
      $self->{buffer} = $buffer_ref->[0];
    }
    
    # Content
    my $state = $self->{state} // "";
    if ($state eq "content" || $state eq "finished") {
      my $buffer = $self->{buffer};
      $self->{buffer} = "";
      my $content = $self->content;
      $content->parse($buffer);
      $self->{content} = $content;
    }
    
    # Check message size
    my $max = $self->max_message_size;
    if ($max != 0 && $max < $self->{raw_size}) {
      $self->_limit("Maximum message size exceeded");
      return;
    }
    
    # Check header size
    if ($self->headers->is_limit_exceeded) {
      $self->_limit("Maximum header size exceeded");
      return;
    }
    
    # Check buffer size
    if ($self->content->is_limit_exceeded) {
      $self->_limit("Maximum buffer size exceeded");
      return;
    }
    
    $self->emit("progress");
    
    if ($self->content->is_finished) {
      $self->finish;
    }
  }
  
  method _limit : void ($message : string) {
    ++$self->{limit};
    $self->set_error(Hash->new({message => $message}));
    die $message;
  }
  
  method save_to : void ($path : string) {
    
    my $content = $self->content;
    
    if ($content->is_multipart) {
      die "Multipart content cannot be saved to files";
    }
    $content->(Mojo::Content::Single)->asset->move_to($path);
  }
  
  method start_line_size : int () { die "Not implemented."; }
  
  method text : string () {
    
    my $body = $self->body;
    
    return $body;
  }
  
  method to_string : string () {
    
    return $self->build_start_line . $self->build_headers . $self->build_body;
  }
  
  method upload : Mojo::Upload ($name : string) { return (Mojo::Upload)$self->_cache("uploads", 0, $name); }
  
  method uploads : Mojo::Upload[] () {
    
    my $uploads = List->new(new Mojo::Upload[0]);
    for my $data (@{$self->_parse_formdata(1)}) {
      my $upload = Mojo::Upload->new({
        name     => $data->(object[])->[0],
        filename => $data->(object[])->[2],
        asset    => $data->(object[])->[1]->(Mojo::Content::Single)->asset,
        headers  => $data->(object[])->[1]->(Mojo::Content)->headers
      });
      $uploads->push($upload);
    }
    
    return $uploads->to_array->(Mojo::Upload[]);
  }
  
  method _build : string ($method : string) {
    
    my $buffer = StringBuffer->new;
    my $offset = 0;
    
    while (1) {
      
      my $chunk = (string)undef;
      if ($method eq "get_start_line_chunk") {
        $chunk = $self->get_start_line_chunk($offset);
      }
      elsif ($method eq "get_header_chunk") {
        $chunk = $self->get_header_chunk($offset);
      }
      elsif ($method eq "get_body_chunk") {
        $chunk = $self->get_body_chunk($offset);
      }
      
      # No chunk yet, try again
      unless ($chunk) {
        next;
      }
      
      # End of part
      my $len = length $chunk;
      unless ($len) {
        last;
      }
      
      $offset += $len;
      $buffer->push($chunk);
    }
    
    return $buffer->to_string;
  }
  
  method _cache : object ($method : string, $all : int, $name : string) {
    
    # Cache objects by name
    my $caches = (Hash)$self->{_cache}->get($method);
    
    unless ($caches) {
      $caches = Hash->new;
      
      my $items = (object[])undef;
      if ($method eq "uploads") {
        $items = $self->uploads;
      }
      elsif ($method eq "cookies") {
        $items = $self->cookies;
      }
      
      for my $_ (@$items) {
        my $name = (string)undef;
        if ($method eq "uploads") {
          $name = $_->(Mojo::Upload)->name;
        }
        elsif ($method eq "cookies") {
          $name = $_->(Mojo::Cookie)->name;
        }
        
        my $list = (List)$caches->get($name);
        unless ($list) {
          $list = List->new;
        }
        $list->push($_);
      }
    }
    
    my $objects_list = $caches->get($name)->(List) // List->new;
    my $objects = $objects_list->to_array;
    
    if ($all) {
      return $objects;
    }
    else {
      if (@$objects > 0) {
        return $objects->[@$objects - 1];
      }
      else {
        return undef;
      }
    }
  }
  
}
