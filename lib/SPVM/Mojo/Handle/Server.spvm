# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Handle::Server extends Mojo::EventEmitter {
  version_from Mojolicious;
  
  use IO::Socket::IP;
  use IO::Socket::UNIX;
  use Mojo::File;
  use Sys::Socket::Constant as SOCKET;
  
  # Fields
  has handle : rw IO::Socket;
  
  # Undocumented Fields
  has active : byte;
  
  has args : Hash of string;
  
  static method new : Mojo::Handle::Server () {
    
    my $self = new Mojo::Handle::Server;
    
    return $self;
  }
  
  static method generate_port : int () {
    return IO::Socket::IP->new({Listen => 5, LocalAddr => "127.0.0.1"})->sockport;
  }
  
  # Static Methods
  method is_accepting : int () {
    return !!$self->{active};
  }
  
  method port : int () {
  
    return $self->{handle}->(IO::Socket::IP)->sockport;
  }
  
  method start : void () {
    
    $self->{active} = 1;
    
    $self->_accept;
  }
  
  method stop : void () {
    
    $self->{active} = 0;
  }
  
  method _accept : void () {

    # Greedy accept
    my $args     = $self->{args};
    my $accepted = 0;
    while ($self->{active} && !((int)$args->get("single_accept") && $accepted++)) {
      
      my $handle = $self->{handle}->accept;
      unless ($handle) {
        return;
      }
      
      # Disable Nagle's algorithm
      $handle->setsockopt(SOCKET->IPPROTO_TCP, SOCKET->TCP_NODELAY, 1);
      
      $self->emit(accept => $handle);
    }
    
  }

}

__END__

sub listen {
  my ($self, $args) = (shift, ref $_[0] ? $_[0] : {@_});

  # Look for reusable file descriptor
  my $path    = $args->{path};
  my $address = $args->{address} || '0.0.0.0';
  my $port    = $args->{port};
  $ENV{MOJO_REUSE} ||= '';
  my $fd = ($path && $ENV{MOJO_REUSE} =~ /(?:^|\,)unix:\Q$path\E:(\d+)/)
    || ($port && $ENV{MOJO_REUSE} =~ /(?:^|\,)\Q$address:$port\E:(\d+)/) ? $1 : undef;

  # Allow file descriptor inheritance
  local $^F = 1023;

  # Reuse file descriptor
  my $handle;
  my $class = $path ? 'IO::Socket::UNIX' : 'IO::Socket::IP';
  if (defined($fd //= $args->{fd})) {
    $handle = $class->new_from_fd($fd, 'r') or croak "Can't open file descriptor $fd: $!";
  }

  else {
    my %options = (Listen => $args->{backlog} // SOMAXCONN, Type => SOCK_STREAM);

    # UNIX domain socket
    my $reuse;
    if ($path) {
      path($path)->remove if -S $path;
      $options{Local} = $path;
      $handle         = $class->new(%options) or croak "Can't create listen socket: $!";
      $reuse          = $self->{reuse} = join ':', 'unix', $path, fileno $handle;
    }

    # IP socket
    else {
      $options{LocalAddr} = $address;
      $options{LocalAddr} =~ y/[]//d;
      $options{LocalPort} = $port if $port;
      $options{ReuseAddr} = 1;
      $options{ReusePort} = $args->{reuse};
      $handle             = $class->new(%options) or croak "Can't create listen socket: $@";
      $fd                 = fileno $handle;
      $reuse              = $self->{reuse} = join ':', $address, $handle->sockport, $fd;
    }

    $ENV{MOJO_REUSE} .= length $ENV{MOJO_REUSE} ? ",$reuse" : "$reuse";
  }
  $handle->blocking(0);
  @$self{qw(args handle)} = ($args, $handle);

  croak 'IO::Socket::SSL 2.009+ required for TLS support' if !Mojo::IOLoop::TLS->can_tls && $args->{tls};
}

