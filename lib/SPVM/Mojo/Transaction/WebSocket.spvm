# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Transaction::WebSocket extends Mojo::Transaction {
  version_from Mojolicious;
  
  use Mojo::WebSocket::Frame;
  use Packer;
  
  # Fields
  has handshake : rw Mojo::Transaction::HTTP;
  
  has masked : rw byte;
  
  has established : rw byte;
  
  has compressed : rw byte;
  
  has max_websocket_size : rw int
    get {
      unless (exists $self->{max_websocket_size}) {
        $self->{max_websocket_size} = length(my $_ = Sys->env("SPVM_MOJO_MAX_WEBSOCKET_SIZE")) ? (int)$_ : 262144;
      }
      
      return $self->{max_websocket_size};
    }
  ;
  
  # Undocumented Fields
  has closing : byte;
  
  has write : string;
  
  has read : string;
  
  has close_code : int;
  
  has close_reason : string;
  
  # Class Methods
  static method new : Mojo::Transaction::WebSocket () {
    
    my $self = new Mojo::Transaction::WebSocket;
    
    $self->SUPER::init;
    
    return $self;
  }
  
  # Instance Methods
  method build_message : Mojo::WebSocket::Frame ($msg : object of string|object[]) {
    
    my $options = (object[])undef;
    
    if ($msg isa string) {
      $options = {text => $msg};
    }
    
    my $options_h = Hash->new($msg->(object[]));
    
    my $json  = $options_h->get_string("json");
    
    if ($json) {
      $options_h->set(text => JSON->new->encode($json));
    }
    
    my $text = $options_h->get_string("text");
    
    # Raw text or binary
    my $frame = (Mojo::WebSocket::Frame)undef;
    if ($text) { $frame = Mojo::WebSocket::Frame->new(1, 0, 0, 0, Mojo::WebSocket->WS_TEXT, $text); }
    else { $frame = Mojo::WebSocket::Frame->new(1, 0, 0, 0, Mojo::WebSocket->WS_BINARY, $options_h->get_string("binary")); }
    
    # "permessage-deflate" extension
    unless ($self->compressed) {
      return $frame;
    }
    
    die "TODO:Compress::Raw::Zlib is not supported.";

=pod

    my $deflate = $self->{deflate}
      ||= Compress::Raw::Zlib::Deflate->new(AppendOutput => 1, MemLevel => 8, WindowBits => -15);
    $deflate->deflate($frame->[5], my $out);
    $deflate->flush($out, Z_SYNC_FLUSH);
    @$frame[1, 5] = (1, substr($out, 0, length($out) - 4));

=cut

    return $frame;
  }
  
  method client_read : void ($chunk : string) { $self->server_read($chunk); }
  method client_write : string () { return $self->server_write; }
  
  method closed : void () {
    
    $self->completed;
    
    my $code = (my $_ = $self->{close_code}) > 0 ? $_ : 1006;
    
    my $reason = $self->{close_reason};
    
    $self->emit(finish => $code, $reason);
  }
  
  method connection : string () { return $self->handshake->connection; }
  
  method finish : void ($code : int = 0, $reason : string = undef) {
    
    my $payload = $code ? Packer->new->pack("n", [(object)$code]) : "";
    
    if ($reason) {
      $payload .= $reason;
    }
    
    $self->send([(object)1, 0, 0, 0, Mojo::WebSocket->WS_CLOSE, $payload]);
    
    $self->{closing} = 1;
  }
  
  method is_websocket : int () { return 1; }
  
  method kept_alive : int () { $self->handshake->kept_alive; }
  method local_address : string () { return $self->handshake->local_address; }
  method local_port : int () { return $self->handshake->local_port; }
  
  method server_read : void ($chunk : string) {
    
    $self->{read} //= "";
    
    $self->{read} .= $chunk;
    
    my $max = $self->max_websocket_size;
    while (1) {
      
      my $frame = Mojo::WebSocket->parse_frame(my $_ = [$self->{read}], $max);
      $self->{read} = $_->[0];
      
      unless ($frame) {
        last;
      }
      
      $self->finish(1009);
      
      unless ($frame) {
        last;
      }
      
      $self->parse_message($frame);
    }
    
    $self->emit("resume");
  }
  
  method protocol : string () { return $self->res->headers->sec_websocket_protocol; }
  
  method remote_address : string () { return $self->handshake->remote_address; }
  method remote_port : int () { return $self->handshake->remote_port; }
  method req : Mojo::Message::Request () { return $self->handshake->req; }
  method res : Mojo::Message::Response () { return $self->handshake->res; }
  
  method resume : void () {
    $self->handshake->resume;
  }
  
  method send : void ($msg : object of string|object[]|Mojo::WebSocket::Frame, $cb : Mojo::EventEmitter::Callback = undef) {
    
    if ($cb) {
      $self->once(drain => $cb);
    }
    
    my $frame = (Mojo::WebSocket::Frame)undef;
    if ($msg isa string || $msg isa object[]) {
      $frame = $self->build_message($msg);
    }
    else {
      $frame = (Mojo::WebSocket::Frame)$msg;
    }
    
    $frame->set_mask($self->masked);
    
    $self->{write} //= "";
    $self->{write} .= Mojo::WebSocket->build_frame($frame);
    
    $self->emit("resume");
  }
  
  method parse_message : void ($frame : Mojo::WebSocket::Frame) {
    die "Not yet supported.";
  }
  
  method server_write : string () {
    
    $self->{write} //= "";
    
    unless (length $self->{write}) {
      $self->emit("drain") ;
    }
    
    if (!length $self->{write} && $self->{closing}) {
      $self->completed;
    }
    
    my $write = $self->{write};
    $self->{write} = undef;
    
    return $write;
  }
  
  method with_compression : void () {
    
    # "permessage-deflate" extension
    if (Re->m(($self->req->headers->sec_websocket_extensions // ""), "permessage-deflate")) {
      $self->set_compressed(1);
      $self->res->headers->set_sec_websocket_extensions("permessage-deflate");
    }
  }
  
  method with_protocols : string ($protos : string[]) {
    
    my $req_sec_websocket_protocols_string = $self->req->headers->sec_websocket_protocol;
    
    unless ($req_sec_websocket_protocols_string) {
      return undef;
    }
    
    my $req_sec_websocket_protocols = Fn->split(",", $req_sec_websocket_protocols_string);
    
    my $protos_h = Hash->new;
    for my $req_sec_websocket_protocol (@$req_sec_websocket_protocols) {
      $req_sec_websocket_protocol = Fn->trim($req_sec_websocket_protocol);
      for my $proto (@$protos) {
        if ($req_sec_websocket_protocol eq $proto) {
          $self->res->headers->set_sec_websocket_protocol($proto);
          return $proto;
        }
      }
    }
    
    return undef;
  }
  
}
