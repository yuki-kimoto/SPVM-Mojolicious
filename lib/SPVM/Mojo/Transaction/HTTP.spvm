# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Transaction::HTTP extends Mojo::Transaction {
  version_from Mojolicious;
  
  use Mojo::Message::Response;
  use Mojo::Message::Request;
  use Mojo::Headers;
  use Mojo::Content;
  
  # Field
  has previous : rw Mojo::Transaction::HTTP;
  
  # Undocumented Fields
  has writing : byte;
  
  has offset : int;
  
  has write : int;
  
  has http_state : string;
  
  has handled : byte;
  
  static method new : Mojo::Transaction::HTTP () {
    
    my $self = new Mojo::Transaction::HTTP;
    
    $self->SUPER::init;
    
    $self->{writing} = -1;
    
    return $self;
  }
  
  # Instance Methods
  method client_read : void ($chunk : string) {
    
    my $res = $self->res;
    if (Fn->uc($self->req->method eq "HEAD")) {
      $res->content->{skip_body} = 1 ;
    }
    
    $res->parse($chunk);
    
    unless ($res->is_finished) {
      return;
    }
    
    if (!$res->is_info || $res->headers->upgrade) {
      $self->completed;
      return;
    }
    
    $self->{res} = Mojo::Message::Response->new;
    
    $self->emit(unexpected => $res);
    
    my $leftovers = $res->content->leftovers;
    
    unless (length $leftovers) {
      return;
    }
    
    $self->client_read($leftovers);
  }
  
  method client_write : string ($server : int) {
    
    $self->_write(0);
  }
  
  method _start_line : string ($msg : Mojo::Message) {
    
    my $buffer  = $msg->get_start_line_chunk($self->{offset});
    my $written = length $buffer;
    
    $self->{write}  -= $written;
    $self->{offset} += $written;
    
    if ($self->{write} <= 0) {
      $self->{http_state} = "headers";
      $self->{write} = $msg->header_size;
      $self->{offset} = 0;
    }
    
    return $buffer;
  }
  
  method _headers : string ($msg : Mojo::Message, $head : int) {
    
    my $buffer  = $msg->get_header_chunk($self->{offset});
    
    my $written = 0;
    if ($buffer) {
      $written = length $buffer;
    }
    
    $self->{write}  -= $written;
    $self->{offset} += $written;
    
    if ($self->{write} <= 0) {
      $self->{http_state} = "body";
      $self->{offset} = 0;
      
      if ($head && $self->is_empty) {
        $self->completed;
        $self->{http_state} = "empty";
      }
    }
    
    return $buffer;
  }
  
  method _body : string ($msg : Mojo::Message, $finish : int) {
    
    # Prepare body chunk
    my $buffer = $msg->get_body_chunk($self->{offset});
    
    if ($buffer) {
      $self->{offset} += length $buffer;
    }
    
    unless ($buffer) {
      $self->{writing} = 0 ;
    }
    
    if ($finish) {
      if ($buffer && !length $buffer) {
        $self->completed;
      }
      else {
        $self->{writing} = 0;
      }
    }
    
    unless ($buffer) {
      $buffer = "";
    }
    
    return $buffer;
  }
  
  method is_empty : int () {
    return !!(Fn->uc($self->req->method) eq "HEAD" || $self->res->is_empty);
  }
  
  method keep_alive : int () {
    
    my $req      = $self->req;
    my $res      = $self->res;
    
    my $req_conn = $req->headers->connection;
    unless ($req_conn) {
      $req_conn = "";
    }
    $req_conn = Fn->lc($req_conn);
    
    my $res_conn = $res->headers->connection;
    unless ($res_conn) {
      $res_conn = "";
    }
    $res_conn = Fn->lc($res_conn);
    
    if ($req_conn eq "close" || $res_conn eq "close") {
      return 0;
    }
    
    if ($res->version eq "1.0") {
      return $res_conn eq "keep-alive";
    }
    
    if ($req->version eq "1.0") {
      return $req_conn eq "keep-alive";
    }
    
    return 1;
  }
  
  method redirects : Mojo::Transaction::HTTP[] () {
    my $previous = $self;
    
    my $redirects_list = List->new(new Mojo::Transaction::HTTP[0]);
    
    while ($previous = $previous->previous) {
      $redirects_list->unshift($previous);
    }
    
    return (Mojo::Transaction::HTTP[])$redirects_list->to_array;
  }
  
  method resume : void () {
    
    if ($self->{writing} == -1) {
      die "[Unexpected Error";
    }
    
    $self->{writing} = 1;
    
    $self->emit("resume");
    
  }
  
  method server_read : void ($chunk : string) {
    
    my $req = $self->req;
    
    unless ($req->error) {
      $req->parse($chunk);
    }
    
    if ($req->is_finished && !$self->{handled}++) {
      $self->emit("request");
    }
    
  }
  
  method server_write : string ($server : int) { $self->_write(1); }
  
  method _write : string ($server : int) {
    
    unless ($server) {
      if ($self->{writing} == -1) {
        $self->{writing} = 1;
      }
    }
    unless ($self->{writing}) {
      return "";
    }
    
    my $msg = (Mojo::Message)undef;
    if ($server) {
      $msg = $self->res;
    }
    else {
      $msg = $self->req;
    }
    
    unless ($self->{http_state}) {
      $self->{http_state} = "start_line";
      $self->{write} = $msg->start_line_size;
    }
    
    # Start-line
    my $chunk = "";
    if ($self->{http_state} eq "start_line") {
      $chunk .= $self->_start_line($msg);
    }
    
    # Headers
    if ($self->{http_state} eq "headers") {
      $chunk .= $self->_headers($msg, $server);
    }
    
    # Body
    if ($self->{http_state} eq "body") {
      $chunk .= $self->_body($msg, $server);
    }
    
    return $chunk;
  }
  
  method is_websocket : int () { return 0; }
  
}
