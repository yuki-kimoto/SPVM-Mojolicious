# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Mojo::Headers {
  version_from Mojolicious;
  
  use Re;
  use StringList;
  use Hash;
  use Sort;
  use Regex;
  use StringBuffer;
  use Mojo::Cookie::Request;
  use Mojo::Cookie::Response;
  use Mojo::Util;
  
  # Interfaces
  interface Stringable;
  
  # Class Variables
  our $NAMES : Hash of string;
  INIT {
    $NAMES = Hash->new;
    
    my $names = [
      "Accept",
      "Accept-Charset",
      "Accept-Encoding",
      "Accept-Language",
      "Accept-Ranges",
      "Access-Control-Allow-Origin",
      "Allow",
      "Authorization",
      "Cache-Control",
      "Connection",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-Length",
      "Content-Location",
      "Content-Range",
      "Content-Security-Policy",
      "Content-Type",
      "Cookie",
      "DNT",
      "Date",
      "ETag",
      "Expect",
      "Expires",
      "Host",
      "If-Modified-Since",
      "If-None-Match",
      "Last-Modified",
      "Link",
      "Location",
      "Origin",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "Range",
      "Sec-WebSocket-Accept",
      "Sec-WebSocket-Extensions",
      "Sec-WebSocket-Key",
      "Sec-WebSocket-Protocol",
      "Sec-WebSocket-Version",
      "Server",
      "Server-Timing",
      "Set-Cookie",
      "Status",
      "Strict-Transport-Security",
      "TE",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "User-Agent",
      "Vary",
      "WWW-Authenticate",
    ];
    
    for my $name (@$names) {
      $NAMES->set(Fn->lc($name) => $name);
    }
  }
  
  # Hop-by-hop headers
  our $HOP_BY_HOP : string[];
  INIT {
    $HOP_BY_HOP = [
      "Connection",
      "Keep-Alive",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "TE",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
    ];
    
    for (my $i = 0; $i < @$HOP_BY_HOP; $i++) {
      $HOP_BY_HOP->[$i] = Fn->lc($HOP_BY_HOP->[$i]);
    }
  }
  
  # Fields
  has max_line_size : rw int
    get {
      unless ($self->{max_line_size} > -1) {
        $self->{max_line_size} = length (my $_ = Sys->env("SPVM_MOJO_MAX_LINE_SIZE")) ? (int)$_ : -1;
        
        unless ($self->{max_line_size} > -1) {
          $self->{max_line_size} = 8192;
        }
      }
      
      return $self->{max_line_size};
    }
  ;
  
  has max_lines : rw int
    get {
      unless ($self->{max_lines} > -1) {
        $self->{max_lines} = length (my $_ = Sys->env("SPVM_MOJO_MAX_LINES")) ? (int)$_ : -1;
        
        unless ($self->{max_lines} > -1) {
          $self->{max_lines} = 100;
        }
      }
      
      return $self->{max_lines};
    }
  ;
  
  # Undocumented Fields
  has headers_h : Hash of string[];
  
  has state : string;
  
  has limit : byte;
  
  has buffer : StringBuffer;
  
  has cache : List of string[];
  
  # Class Methods
  static method new : Mojo::Headers () {
    
    my $self = new Mojo::Headers;
    
    $self->{headers_h} = Hash->new;
    
    $self->{max_line_size} = -1;
    
    $self->{max_lines} = -1;
    
    $self->{buffer} = StringBuffer->new;
    
    return $self;
  }
  
  # Instance Methods
  method add : void ($name : string, $value : string|Stringable|string[]) {
    
    unless ($name) {
      die "The name \$name must be defined.";
    }
    
    my $values = (string[])undef;
    if (!$value) {
      $values = [(string)$value];
    }
    elsif ($value isa string) {
      $values = [(string)$value];
    }
    elsif ($value isa string[]) {
      $values = (string[])$value;
    }
    elsif ($value isa Stringable) {
      $values = [$value->(Stringable)->to_string];
    }
    
    for my $value (@$values) {
      
      unless ($value) {
        die "The value \$value must be defined.";
      }
      
      if (Re->m($value, "[\x0d\x0a]")) {
        die "Invalid characters in the $name header.";
      }
      
      my $key = Fn->lc($name);
      
      my $new_values = (string[])undef;
      if (my $cur_values = (string[])$self->{headers_h}->get($key)) {
        $new_values = Array->merge_string($cur_values, [$value]);
      }
      else {
        $new_values = [$value];
      }
      
      $self->{headers_h}->set($key, $new_values);
    }
  }
  
  method append : void ($name : string, $value : string) {
    
    my $old = $self->header($name);
    
    $self->set_header($name => $old ? "$old, $value" : $value);
  }
  
  method clone : Mojo::Headers () {
    
    my $clone = Mojo::Headers->new;
    
    copy_fields $clone, $self, Mojo::Headers;
    
    for my $_ (@{$self->{headers_h}->keys}) {
      $clone->{headers_h}->set($_ => $self->{headers_h}->get($_));
    }
    
    $clone->{buffer} = $self->{buffer}->clone;
    
    return $clone;
  }
  
  method dehop : void () {
    
    for my $header (@$HOP_BY_HOP) {
      $self->{headers_h}->delete($header);
    }
  }
  
  method every_header : string[] ($name : string) {
    
    my $values = (string[])$self->{headers_h}->get(Fn->lc($name)) // new string[0];
    
    return $values;
  }
  
  method from_hash : Mojo::Headers ($hash : Hash) {
    
    my $keys = $hash->keys;
    
    # Empty hash deletes all headers
    if (@$keys == 0) {
      $self->{headers_h} = Hash->new;
    }
    
    # Merge
    for my $header (@$keys) {
      my $value = $hash->get($header);
      
      my $values = (string[])undef;
      if (!$value) {
        $values = new string[0];
      }
      elsif ($value isa string[]) {
        $values = (string[])$value;
      }
      elsif ($value isa string) {
        $values = [(string)$value];
      }
      else {
        die "The type of the value \$value must be string, string[], or undef type.";
      }
      
      for my $value (@$values) {
        $self->add($header => $value);
      }
    }
  }
  
  method header : string ($name : string) {
    
    unless ($name) {
      die "\$name must be defined.";
    }
    
    my $headers = $self->{headers_h};
    
    my $key = Fn->lc($name);
    
    my $values = (string[])$self->{headers_h}->get($key);
    
    if ($values) {
      return Fn->join(", ", $values);
    }
    else {
      return undef;
    }
  }
  
  method set_header : void ($name : string, $value : string|Stringable|string[]) {
    
    $self->remove($name);
    
    $self->add($name, $value);
  }
  
  method is_finished : int () { return ($self->{state} // "") eq "finished"; }
  
  method is_limit_exceeded : int () { !!$self->{limit}; }
  
  method leftovers : string () {
    my $buffer = $self->{buffer};
    $self->{buffer} = StringBuffer->new;
    return $buffer->to_string;
  }
  
  method links : Hash of Hash of string () {
    
    my $header = $self->link // "";
    my $data   = (Hash of Hash of string)Hash->new;
    while (1) {
      if (my $r = Re->s(my $_ = [$header], "^[,\s]*<(.+?)>", "")) {
        $header = $_->[0];
        
        my $m = $r->match;
        my $target = $m->cap1;
        my $params_and_header = Mojo::Util->header_params($header);
        my $params = (Hash)$params_and_header->[0];
        $header = (string)$params_and_header->[1];
        
        if (my $rel = $params->get_string("rel")) {
          unless ($data->get($rel)) {
            my $params_h = (Hash of string)$params->clone;
            $params_h->set("link" => $target);
            $data->set($rel => $params_h);
          }
        }
      }
    }
    
    return $data;
  }
  
  method set_links : void ($links : object[]) {
    
    die "The links \$links must be defined.";
    
    my $links_h = Hash->new($links);
    
    my $keys = $links_h->keys;
    
    Sort->sort_string_asc($keys);
    
    my $string_links_list = StringList->new;
    
    for my $_ (@$keys) {
      my $string_link = "<" . $links_h->get_string($_) . ">; rel=\"$_\"}";
    }
    
    $self->set_link(Fn->join(", ", $string_links_list->to_array));
  }
  
  method names : string[] () {
    
    my $names = $self->{headers_h}->keys;
    
    Sort->sort_string_asc($names);
    
    return $names;
  }
  
  method parse : void ($chunk : string) {
    
    $self->{state} = "headers";
    $self->{buffer}->push($chunk);
    my $headers = $self->{cache} //= List->new(new string[][0]);
    my $buffer = $self->{buffer};
    my $size    = $self->max_line_size;
    my $lines   = $self->max_lines;
    
    my $offset = 0;
    while (1) {
      
      my $_ = Re->s($buffer, "^(.*?)\x0d?\x0a", "");
      
      unless ($_) {
        last;
      }
      
      my $line_buffer = StringBuffer->new($_->match->cap1);
      
      # Check line size limit
      if ($offset > $size || $headers->length >= $lines) {
        $self->{state} = "finished";
        $self->{limit} = 1;
        return;
      }
      
      # New header
      if (my $_ = Re->m($line_buffer, "^(\S[^:]*):\s*(.*)$")) {
        
        my $name = $_->cap1;
        my $value = $_->cap2;
        
        $headers->push([$name, $value]);
      }
      
      # Multi-line
      elsif ((my $_ = Re->s($line_buffer, "^\s+", "")) && $headers->length) {
        my $last_header = (string[])$headers->get($headers->length - 1);
        my $last_header_value = $last_header->[1];
        $last_header->[1] = $last_header_value . " " . $line_buffer->to_string;
      }
      
      # Empty line
      else {
        for (my $i = 0; $i < $headers->length; $i++) {
          
          my $items = (string[])$headers->get($i);
          
          my $name = (string)undef;
          for (my $item_index = 0; $item_index < @$items; $item_index++) {
            unless ($name) {
              $name = $items->[$item_index];
              next;
            }
            
            my $value = $items->[$item_index];
            
            $self->add($name, $value);
          }
        }
        
        $self->{state} = "finished";
        $self->{cache} = StringList->new;
        
        return;
      }
      
    }
   
    # Check line size limit
    if ($self->{buffer}->length > $size) {
      $self->{state} = "finished";
      $self->{limit} = 1;
    }
  }
  
  method referer : string () { return $self->referrer; }
  
  method set_referer : void ($value : string|Stringable|string[]) { $self->set_referrer($value); }
  
  method referrer : string () { return $self->header("Referer"); }
  
  method set_referrer : void ($value : string|Stringable|string[]) { $self->set_header(Referer => $value); }
  
  method remove : void ($name : string) {
    
    unless ($name) {
      die "The name \$name must be defined";
    }
    
    my $key = Fn->lc($name);
    
    $self->{headers_h}->delete($key);
  }
  
  method to_hash : Hash ($multi : int = 0) {
    
    my $hash = Hash->new;
    
    if ($multi) {
      for my $name (@{$self->names}) {
        $hash->set($name => $self->{headers_h}->get(Fn->lc($name)));
      }
    }
    else {
      for my $name (@{$self->names}) {
        $hash->set($name => $self->header($name));
      }
    }
    
    return $hash;
  }
  
  method to_string : string () {
    
    my $names = $self->names;
    
    my $buffer = StringBuffer->new;
    for my $name (@$names) {
      my $header_string = $self->header($name);
      if ($header_string) {
        $buffer->push("$name:");
        $buffer->push($header_string);
        $buffer->push("\r\n");
      }
    }
    
    my $string = $buffer->to_string;
    
    return $string;
  }
  
  method accept : string () {

    my $value = $self->header("accept");

    return $value;
  }

  method set_accept : void ($value : string|Stringable|string[]) {
    
    $self->set_header("accept" => $value);
  }

  method accept_charset : string () {

    my $value = $self->header("accept-charset");

    return $value;
  }

  method set_accept_charset : void ($value : string|Stringable|string[]) {

    $self->set_header("accept-charset" => $value);
  }

  method accept_encoding : string () {

    my $value = $self->header("accept-encoding");

    return $value;
  }

  method set_accept_encoding : void ($value : string|Stringable|string[]) {

    $self->set_header("accept-encoding" => $value);
  }

  method accept_language : string () {

    my $value = $self->header("accept-language");

    return $value;
  }

  method set_accept_language : void ($value : string|Stringable|string[]) {

    $self->set_header("accept-language" => $value);
  }

  method accept_ranges : string () {

    my $value = $self->header("accept-ranges");

    return $value;
  }

  method set_accept_ranges : void ($value : string|Stringable|string[]) {

    $self->set_header("accept-ranges" => $value);
  }

  method access_control_allow_origin : string () {

    my $value = $self->header("access-control-allow-origin");

    return $value;
  }

  method set_access_control_allow_origin : void ($value : string|Stringable|string[]) {

    $self->set_header("access-control-allow-origin" => $value);
  }

  method allow : string () {

    my $value = $self->header("allow");

    return $value;
  }

  method set_allow : void ($value : string|Stringable|string[]) {

    $self->set_header("allow" => $value);
  }

  method authorization : string () {

    my $value = $self->header("authorization");

    return $value;
  }

  method set_authorization : void ($value : string|Stringable|string[]) {

    $self->set_header("authorization" => $value);
  }

  method cache_control : string () {

    my $value = $self->header("cache-control");

    return $value;
  }

  method set_cache_control : void ($value : string|Stringable|string[]) {

    $self->set_header("cache-control" => $value);
  }

  method connection : string () {

    my $value = $self->header("connection");

    return $value;
  }

  method set_connection : void ($value : string|Stringable|string[]) {

    $self->set_header("connection" => $value);
  }

  method content_disposition : string () {

    my $value = $self->header("content-disposition");

    return $value;
  }

  method set_content_disposition : void ($value : string|Stringable|string[]) {

    $self->set_header("content-disposition" => $value);
  }

  method content_encoding : string () {

    my $value = $self->header("content-encoding");

    return $value;
  }

  method set_content_encoding : void ($value : string|Stringable|string[]) {

    $self->set_header("content-encoding" => $value);
  }

  method content_language : string () {

    my $value = $self->header("content-language");

    return $value;
  }

  method set_content_language : void ($value : string|Stringable|string[]) {

    $self->set_header("content-language" => $value);
  }

  method content_length : string () {

    my $value = $self->header("content-length");

    return $value;
  }

  method set_content_length : void ($value : string|Stringable|string[]) {

    $self->set_header("content-length" => $value);
  }

  method content_location : string () {

    my $value = $self->header("content-location");

    return $value;
  }

  method set_content_location : void ($value : string|Stringable|string[]) {

    $self->set_header("content-location" => $value);
  }

  method content_range : string () {

    my $value = $self->header("content-range");

    return $value;
  }

  method set_content_range : void ($value : string|Stringable|string[]) {

    $self->set_header("content-range" => $value);
  }

  method content_security_policy : string () {

    my $value = $self->header("content-security-policy");

    return $value;
  }

  method set_content_security_policy : void ($value : string|Stringable|string[]) {

    $self->set_header("content-security-policy" => $value);
  }

  method content_type : string () {

    my $value = $self->header("content-type");

    return $value;
  }

  method set_content_type : void ($value : string|Stringable|string[]) {

    $self->set_header("content-type" => $value);
  }

  method cookie : string () {

    my $value = $self->header("cookie");

    return $value;
  }

  method set_cookie : void ($value : string|Stringable|string[]) {

    $self->set_header("cookie" => $value);
  }

  method dnt : string () {

    my $value = $self->header("dnt");

    return $value;
  }

  method set_dnt : void ($value : string|Stringable|string[]) {

    $self->set_header("dnt" => $value);
  }

  method date : string () {

    my $value = $self->header("date");

    return $value;
  }

  method set_date : void ($value : string|Stringable|string[]) {

    $self->set_header("date" => $value);
  }

  method etag : string () {

    my $value = $self->header("etag");

    return $value;
  }

  method set_etag : void ($value : string|Stringable|string[]) {

    $self->set_header("etag" => $value);
  }

  method expect : string () {

    my $value = $self->header("expect");

    return $value;
  }

  method set_expect : void ($value : string|Stringable|string[]) {

    $self->set_header("expect" => $value);
  }

  method expires : string () {

    my $value = $self->header("expires");

    return $value;
  }

  method set_expires : void ($value : string|Stringable|string[]) {

    $self->set_header("expires" => $value);
  }

  method host : string () {

    my $value = $self->header("host");

    return $value;
  }

  method set_host : void ($value : string|Stringable|string[]) {

    $self->set_header("host" => $value);
  }

  method if_modified_since : string () {

    my $value = $self->header("if-modified-since");

    return $value;
  }

  method set_if_modified_since : void ($value : string|Stringable|string[]) {

    $self->set_header("if-modified-since" => $value);
  }

  method if_none_match : string () {

    my $value = $self->header("if-none-match");

    return $value;
  }

  method set_if_none_match : void ($value : string|Stringable|string[]) {

    $self->set_header("if-none-match" => $value);
  }

  method last_modified : string () {

    my $value = $self->header("last-modified");

    return $value;
  }

  method set_last_modified : void ($value : string|Stringable|string[]) {

    $self->set_header("last-modified" => $value);
  }

  method link : string () {

    my $value = $self->header("link");

    return $value;
  }

  method set_link : void ($value : string|Stringable|string[]) {

    $self->set_header("link" => $value);
  }

  method location : string () {

    my $value = $self->header("location");

    return $value;
  }

  method set_location : void ($value : string|Stringable|string[]) {

    $self->set_header("location" => $value);
  }

  method origin : string () {

    my $value = $self->header("origin");

    return $value;
  }

  method set_origin : void ($value : string|Stringable|string[]) {

    $self->set_header("origin" => $value);
  }

  method proxy_authenticate : string () {

    my $value = $self->header("proxy-authenticate");

    return $value;
  }

  method set_proxy_authenticate : void ($value : string|Stringable|string[]) {

    $self->set_header("proxy-authenticate" => $value);
  }

  method proxy_authorization : string () {

    my $value = $self->header("proxy-authorization");

    return $value;
  }

  method set_proxy_authorization : void ($value : string|Stringable|string[]) {

    $self->set_header("proxy-authorization" => $value);
  }

  method range : string () {

    my $value = $self->header("range");

    return $value;
  }

  method set_range : void ($value : string|Stringable|string[]) {

    $self->set_header("range" => $value);
  }

  method sec_websocket_accept : string () {

    my $value = $self->header("sec-websocket-accept");

    return $value;
  }

  method set_sec_websocket_accept : void ($value : string|Stringable|string[]) {

    $self->set_header("sec-websocket-accept" => $value);
  }

  method sec_websocket_extensions : string () {

    my $value = $self->header("sec-websocket-extensions");

    return $value;
  }

  method set_sec_websocket_extensions : void ($value : string|Stringable|string[]) {

    $self->set_header("sec-websocket-extensions" => $value);
  }

  method sec_websocket_key : string () {

    my $value = $self->header("sec-websocket-key");

    return $value;
  }

  method set_sec_websocket_key : void ($value : string|Stringable|string[]) {

    $self->set_header("sec-websocket-key" => $value);
  }

  method sec_websocket_protocol : string () {

    my $value = $self->header("sec-websocket-protocol");

    return $value;
  }

  method set_sec_websocket_protocol : void ($value : string|Stringable|string[]) {

    $self->set_header("sec-websocket-protocol" => $value);
  }

  method sec_websocket_version : string () {

    my $value = $self->header("sec-websocket-version");

    return $value;
  }

  method set_sec_websocket_version : void ($value : string|Stringable|string[]) {

    $self->set_header("sec-websocket-version" => $value);
  }

  method server : string () {

    my $value = $self->header("server");

    return $value;
  }

  method set_server : void ($value : string|Stringable|string[]) {

    $self->set_header("server" => $value);
  }

  method server_timing : string () {

    my $value = $self->header("server-timing");

    return $value;
  }

  method set_server_timing : void ($value : string|Stringable|string[]) {

    $self->set_header("server-timing" => $value);
  }

  method get_set_cookie : string () {

    my $value = $self->header("set-cookie");

    return $value;
  }

  method set_set_cookie : void ($value : string|Stringable|string[]) {

    $self->set_header("set-cookie" => $value);
  }

  method status : string () {

    my $value = $self->header("status");

    return $value;
  }

  method set_status : void ($value : string|Stringable|string[]) {

    $self->set_header("status" => $value);
  }

  method strict_transport_security : string () {

    my $value = $self->header("strict-transport-security");

    return $value;
  }

  method set_strict_transport_security : void ($value : string|Stringable|string[]) {

    $self->set_header("strict-transport-security" => $value);
  }

  method te : string () {

    my $value = $self->header("te");

    return $value;
  }

  method set_te : void ($value : string|Stringable|string[]) {

    $self->set_header("te" => $value);
  }

  method trailer : string () {

    my $value = $self->header("trailer");

    return $value;
  }

  method set_trailer : void ($value : string|Stringable|string[]) {

    $self->set_header("trailer" => $value);
  }

  method transfer_encoding : string () {

    my $value = $self->header("transfer-encoding");

    return $value;
  }

  method set_transfer_encoding : void ($value : string|Stringable|string[]) {

    $self->set_header("transfer-encoding" => $value);
  }

  method upgrade : string () {

    my $value = $self->header("upgrade");

    return $value;
  }

  method set_upgrade : void ($value : string|Stringable|string[]) {

    $self->set_header("upgrade" => $value);
  }

  method user_agent : string () {

    my $value = $self->header("user-agent");

    return $value;
  }

  method set_user_agent : void ($value : string|Stringable|string[]) {

    $self->set_header("user-agent" => $value);
  }

  method vary : string () {

    my $value = $self->header("vary");

    return $value;
  }

  method set_vary : void ($value : string|Stringable|string[]) {

    $self->set_header("vary" => $value);
  }

  method www_authenticate : string () {

    my $value = $self->header("www-authenticate");

    return $value;
  }

  method set_www_authenticate : void ($value : string|Stringable|string[]) {

    $self->set_header("www-authenticate" => $value);
  }
  
}

