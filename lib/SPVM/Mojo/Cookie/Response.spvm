# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Cookie::Response extends Mojo::Cookie {
  version_from Mojolicious;
  
  use Mojo::Util;
  
  # Class Variables
  our $ATTRS : Hash;
  INIT {
    $ATTRS = Hash->new({
      domain => 1,
      expires => 1,
      httponly => 1,
      "max-age" => 1,
      path => 1,
      samesite => 1,
      secure => 1,
    });
  }
  
  # Fields
  has domain : rw string;
  
  has expires : rw long;
  
  has host_only : rw byte;
  
  has httponly : rw byte;
  
  has max_age : rw int;
  
  has path : rw string;
  
  has samesite : rw string;
  
  has secure : rw byte;
  
  # Class Methods
  static method new : Mojo::Cookie::Response () {
    
    my $self = new Mojo::Cookie::Response;
    
    return $self;
  }
  
  # Instance Methods
  method parse : Mojo::Cookie::Response[] ($string : string) {
    
    my $cookies = List->new(new Mojo::Cookie::Response[0]);
    
    my $tree = Mojo::Util->split_cookie_header($string // "");
    
    for (my $i = 0; $i < @$tree; $i += 2) {
      my $pairs = $tree->[$i];
      my $name = $pairs->[0];
      my $value = $pairs->[1];
      
      my $cookie = Mojo::Cookie::Response->new;
      $cookie->{name} = $name;
      $cookie->{value} = $value // "";
      
      $cookie->{expires} = -1;
      
      for (my $j = 2; $j < @$tree; $j += 2) {
        my $name = $pairs->[$j];
        my $value = $pairs->[$j + 1];
        
        my $attr = Fn->lc($name);
        unless ($ATTRS->exists($attr)) {
          next;
        }
        
        if ($attr eq "domain") {
          if ($value) {
            my $value_ref = [$value];
            Re->s($value_ref, "^\.", "");
            $value = $value_ref->[0];
            $cookie->{domain} = $value;
          }
        }
        elsif ($attr eq "expires") {
          $cookie->{expires} = Mojo::Date->new($value // "")->epoch_sec;
        }
        elsif ($attr eq "httponly") {
          $cookie->{httponly} = 1;
        }
        elsif ($attr eq "max-age") {
          $cookie->{max_age} = Fn->to_int($value);
        }
        elsif ($attr eq "path") {
          $cookie->{path} = $value;
        }
        elsif ($attr eq "samesite") {
          $cookie->{samesite} = $value;
        }
        elsif ($attr eq "secure") {
          $cookie->{secure} = 1;
        }
      }
      
      $cookies->push($cookie);
      
    }
    
    return $cookies->to_array->(Mojo::Cookie::Response[]);
  }
  
  method to_string : string () {
    
    # Name and value
    my $name = $self->name;
    unless (length $name) {
      return "";
    }
    my $value  = $self->value // "";
    my $cookie = Fn->join("=", [$name, Re->m($value, "[,;\" ]") ? Mojo::Util->quote($value) : $value]);
    
    # "expires"
    my $expires = $self->expires;
    if ($expires >= 0) {
      $cookie .= "; expires=" . Mojo::Date->new($expires)->to_string;
    }
    
    # "domain"
    if (my $domain = $self->domain) { $cookie .= "; domain=$domain"; }
    
    # "path"
    if (my $path = $self->path) { $cookie .= "; path=$path"; }
    
    # "secure"
    if ($self->secure) {
      $cookie .= "; secure";
    }
    
    # "HttpOnly"
    if ($self->httponly) {
      $cookie .= "; HttpOnly";
    }
    
    # "Same-Site"
    if (my $samesite = $self->samesite) {
      $cookie .= "; SameSite=$samesite";
    }
    
    # "Max-Age"
    if ((my $max = $self->max_age) >= 0) {
      $cookie .= "; Max-Age=$max";
    }
    
    return $cookie;
  }
  
}
