# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::Content extends Mojo::EventEmitter {
  version_from Mojolicious;
  
  allow Mojo::Transaction::HTTP;
  
  use Native::MethodCall;
  use Mojo::SSE;
  use Mojo::SSE::Event;
  use Format;
  
  # Class Variables
  our $BOUNDARY_RE : Regex;
  INIT {
    $BOUNDARY_RE = Regex->new("multipart.*boundary\s*=\s*(?:\"([^\"]+)\"|([\w'(),.:?\-+/]+))", "i");
  }
  
  # Fields
  has auto_decompress : rw byte;
  
  has auto_relax : rw byte;
  
  has relaxed : rw byte;
  
  has skip_body : rw byte;
  
  has headers : rw Mojo::Headers
    get {
      unless (exists $self->{headers}) {
        $self->{headers} = Mojo::Headers->new;
      }
      
      return $self->{headers};
    }
  ;
  
  has max_buffer_size : rw int
    get {
      unless (exists $self->{max_buffer_size}) {
        $self->{max_buffer_size} = length (my $_ = Sys->env("SPVM_MOJO_MAX_BUFFER_SIZE")) ? (int)$_ : 262144;
      }
      
      return $self->{max_buffer_size};
    }
  ;
  
  has max_leftover_size : rw int
    get {
      unless (exists $self->{max_leftover_size}) {
        $self->{max_leftover_size} = length (my $_ = Sys->env("SPVM_MOJO_MAX_BUFFER_SIZE")) ? (int)$_ : 262144;
      }
      
      return $self->{max_leftover_size};
    }
  ;
  
  # Undocumented Fields
  has body_buffer : string;
  
  has eof : byte;
  
  has state : string;
  
  has dynamic : byte;
  
  has header_buffer : string;
  
  has limit : byte;
  
  has buffer : string;
  
  has real_size : int;
  
  has pre_buffer : string;
  
  has post_buffer : string;
  
  has chunk_state : string;
  
  has size : int;
  
  has raw_size : int;
  
  has header_size : int;
  
  has chunked : byte;
  
  has chunks : byte;
  
  has gz : object;
  
  has chunk_len : int;
  
  has body : byte;
  
  has sse : byte;
  
  # Instance Methods
  protected method init : void ($options : object[] = undef) {
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("max_buffer_size")) {
      my $max_buffer_size = $options_h->get_int("max_buffer_size");
      
      unless ($max_buffer_size > 0) {
        die "The value of max_buffer_size option must be a positive value.";
      }
    }
    else {
      $self->{max_buffer_size} = 262144;
    }
    
    if ($options_h->exists("max_leftover_size")) {
      my $max_leftover_size = $options_h->get_int("max_leftover_size");
      
      unless ($max_leftover_size > 0) {
        die "The value of max_leftover_size option must be a positive value.";
      }
    }
    else {
      $self->{max_leftover_size} = 262144;
    }
    
    $self->{buffer} = "";
    
    $self->{pre_buffer} = "";
    
  }
  
  method body_contains : int ($chunk : string) { die "Not impelmented"; }
  
  method body_size : int () { die "Not impelmented."; }
  
  method boundary : string () {
    
    my $content_type = $self->headers->content_type;
    unless ($content_type) {
      $content_type = "";
    }
    
    my $boundary = (string)undef;
    if (my $_ = $BOUNDARY_RE->match($content_type)) {
      $boundary = $_->cap1;
      unless ($boundary) {
        $boundary = $_->cap2;
      }
    }
    
    return $boundary;
  }
  
  method clone : Mojo::Content () {
    if ($self->is_dynamic) {
      return undef;
    }
    
    my $clone = (Mojo::Content)Native::MethodCall->new_proto($self, [(object){headers => $self->headers->clone}]);
    
    return $clone;
  }
  
  method generate_body_chunk : string ($offset : int) {
    
    unless ($self->{body_buffer}) {
      $self->{body_buffer} = "";
    }
    
    unless (length $self->{body_buffer}) {
      $self->emit(drain => $offset);
    }
    
    if (length $self->{body_buffer}) {
      my $body_buffer = $self->{body_buffer};
      $self->{body_buffer} = undef;
      return $body_buffer;
    }
    
    if ($self->{eof}) {
      return "";
    }
    
    my $content_length = $self->headers->content_length;
    
    my $chunk = "";
    eval { Fn->to_int($content_length); }
    if ($@) {
      $chunk = undef;
    }
    
    return $chunk;
  }
  
  method get_body_chunk : string ($offset : int) { die "Not implemented."; }
  
  method get_header_chunk : string ($offset : int) {
    
    $self->_headers;
    
    my $headers = $self->headers;
    
    my $header_buffer = $self->{header_buffer};
    
    my $header_buffer_length = length $header_buffer;
    
    my $max = ($header_buffer_length <= 131072) ? $header_buffer_length : 131072;
    
    my $chunk = Fn->substr($header_buffer, $offset, $max - $offset);
    
    return $chunk;
  }
  
  method header_size : int () {
    
    $self->_headers;
    
    return length $self->{header_buffer};
  }
  
  method headers_contain : int ($chunk : string) {
    
    $self->_headers;
    
    my $header_buffer = $self->{header_buffer};
    
    return Fn->index($header_buffer, $chunk) >= 0;
  }
  
  method is_chunked : int () {
    return !!$self->headers->transfer_encoding;
  }
  
  method is_compressed : int () {
    
    $self->_headers;
    
    my $content_encoding = Fn->lc($self->headers->content_encoding // "");
    
    return $content_encoding eq "gzip";
  }
  
  method is_dynamic : int () {
  
    return !!$self->{dynamic};
  }
  
  method is_finished : int () {
    
    my $state = $self->{state} // "";
    
    return $state eq "finished";
  }
  
  method is_limit_exceeded : int () {
    
    return !!$self->{limit};
  }
  
  method is_multipart : int () { return 0; }
  
  method is_parsing_body : int () {
    
    my $state = $self->{state} // "";
    
    return $state eq "body";
  }
  
  method is_sse : int () {
    return ($self->headers->content_type // "") eq "text/event-stream";
  }
  
  method leftovers : string () {
    
    return $self->{buffer};
  }
  
  method parse : Mojo::Content ($chunk : string) {
    
    $self->_parse_until_body($chunk);
    
    if ($self->{state} eq "headers") {
      return $self;
    }
    
    if ($self->is_chunked && $self->{state} ne "headers") {
      $self->_parse_chunked;
      
      my $chunk_state = $self->{chunk_state} // "";
      
      if ($chunk_state eq "finished") {
        $self->{state} = "finished";
      }
    }
    
    # Not chunked, pass through to second buffer
    else {
      $self->{real_size} += length $self->{pre_buffer};
      my $limit = $self->is_finished && length($self->{buffer}) > $self->max_leftover_size;
      unless ($limit) {
        $self->{buffer} .= $self->{pre_buffer};
        $self->{pre_buffer} = "";
      }
    }
    
    # No content
    if ($self->skip_body) {
      $self->{state} = "finished";
      return $self;
    }
    
    # Relaxed parsing
    my $headers = $self->headers;
    my $content_length = $headers->content_length // "";
    
    if ($self->auto_relax && !length $content_length) {
      my $connection = Fn->lc($headers->connection // "");
      
      if ($connection eq "close" || !$connection) {
        $self->{relaxed} = 1 ;
      }
    }
    
    if ($self->is_chunked || $self->relaxed) {
      $self->_decompress($self->{buffer});
      $self->{size} += length $self->{buffer};
      $self->{buffer} = "";
      return $self;
    }
    
    # Normal content
    my $len = 0;
    eval { $len = Fn->to_int($content_length); }
    
    if ((my $need = ($len - $self->{size})) > 0) {
      my $len   = length $self->{buffer};
      if ($need > $len) {
        $need = $len;
      }
      
      my $chunk = Fn->substr(my $ref = [$self->{buffer}], 0, $need, "");
      $self->{buffer} = $ref->[0];
      
      $self->_decompress($chunk);
      $self->{size} += length $chunk;
    }
    
    if ($len <= $self->progress) {
      $self->{state} = "finished";
    }
    
    return $self;
  }
  
  method parse_body : void ($chunk : string) {
    
    $self->{state} = "body";
    
    $self->parse($chunk);
  }
  
  method progress : int () {
    
    my $state = $self->{state};
    
    unless ($state) {
      return 0;
    }
    
    unless ($state eq "body" || $state eq "finished") {
      return 0;
    }
    
    my $progress = $self->{raw_size} - $self->{header_size};
    
    return $progress;
  }
  
  method write : void ($chunk : string = undef, $cb : Mojo::Callback = undef) {
    
    $self->{dynamic} = 1;
    
    if ($chunk) {
      $self->{body_buffer} .= $chunk;
    }
    
    if ($cb) {
      $self->once(drain => $cb);
    }
    
    if ($chunk && !length $chunk) {
      $self->{eof} = 1;
    }
    
  }
  
  method write_chunk : void ($chunk : string = undef, $cb : Mojo::Callback = undef) {
    
    unless ($self->{chunked}) {
      $self->headers->set_transfer_encoding("chunked");
    }
    
    $self->{chunked} = 1;
    $self->{dynamic} = 1;
    
    if ($chunk) {
      $self->{body_buffer} .= $self->_build_chunk($chunk);
    }
    
    if ($cb) {
      $self->once(drain => $cb);
    }
    
    if ($chunk && !length $chunk) {
      $self->{eof} = 1;
    }
    
  }
  
  method write_sse : void ($event : Mojo::SSE::Event, $cb : Mojo::Callback) {
    
    unless ($self->{sse}) {
      $self->headers->set_content_type("text/event-stream");
    }
    
    $self->{sse} = 1;
    
    unless ($event) {
      $self->write;
      return;
    }
    
    $self->write(Mojo::SSE->build_event($event), $cb);
  }
  
  protected method _parse_until_body : void ($chunk : string) {
    
    $self->{raw_size} += length($chunk = $chunk // "");
    $self->{pre_buffer} //= "";
    $self->{pre_buffer} .= $chunk;
    
    $self->{state} = $self->{state} // "headers";
    if ($self->{state} eq "headers") {
      $self->_parse_headers;
    }
    
    if ($self->{state} ne "headers" && !$self->{body}++) {
      $self->emit("body");
    }
  }
  
  private method _build_chunk : string ($chunk : string) {
    
    # End
    unless (length $chunk) {
      return "\x0d\x0a0\x0d\x0a\x0d\x0a";
    }
    
    # First chunk has no leading CRLF
    my $crlf = $self->{chunks}++ ? "\x0d\x0a" : "";
    
    return $crlf . Format->sprintf("%x", [(object)length $chunk]) . "\x0d\x0a$chunk";
  }
  
  private method _decompress : void ($chunk : string) {
    
    # No compression
    unless ($self->auto_decompress && $self->is_compressed) {
      $self->emit(read => $chunk);
      return;
    }
    
    # Decompress
    $self->{post_buffer} .= $chunk;
    $self->{gz} = $self->{gz} // &_new_compress_raw_zlib_inflate;
    my $gz     = $self->{gz};
    my $post_buffer_ref = [$self->{post_buffer}];
    my $out_ref = [(string)undef];
    my $status = &_inflate($gz, $post_buffer_ref,$out_ref);
    my $out = $out_ref->[0];
    if ($out) {
      $self->emit(read => $out) ;
    }
    
    # Replace Content-Encoding with Content-Length
    if ($status == &Z_STREAM_END) {
      $self->headers->set_content_length(&_total_out($gz));
      $self->headers->remove("Content-Encoding") ;
    }
    
    # Check buffer size
    if (length($self->{post_buffer} // "") > $self->max_buffer_size) {
      $self->{state} = "finished";
      $self->{limit} = 1;
    }
  }
  
  private static method Z_STREAM_END : int () {
    
    die "TODO";
    
    # TODO
  }
  
  private static method _new_compress_raw_zlib_inflate : object () {
    
    die "TODO";
    # return Compress::Raw::Zlib::Inflate->new(WindowBits => WANT_GZIP);
  }
  
  private static method _inflate : int ($compress_raw_zlib_inflate : object, $post_buffer_ref : string[], $out_ref : string[]) {
    
    die "TODO";
    # my $status = $gz->inflate(\$self->{post_buffer}, my $out);
    # return $status;
  }
  
  private static method _total_out : int ($compress_raw_zlib_inflate : object) {
    
    die "TODO";
    # $gz->total_out;
    
  }
  
  private method _headers : void () {
    
    if ($self->{header_buffer}) {
      return;
    }
    
    my $headers = $self->headers->to_string;
    
    $self->{header_buffer} = $headers ? "$headers\x0d\x0a\x0d\x0a" : "\x0d\x0a";
  }
  
  private method _parse_chunked : void () {
    
    # Trailing headers
    if (($self->{chunk_state} // "") eq "trailing_headers") {
      $self->_parse_chunked_trailing_headers;
      return;
    }
    
    while (my $len = length $self->{pre_buffer}) {
      # Start new chunk (ignore the chunk extension)
      unless ($self->{chunk_len}) {
        
        my $pre_buffer_ref = [$self->{pre_buffer}];
        
        my $_ = Re->s($pre_buffer_ref, "^(?:\x0d?\x0a)?([0-9a-fA-F]+).*\x0a", "");
        $self->{pre_buffer} = $pre_buffer_ref->[0];
        
        unless ($_) {
          last;
        }
        
        if ($self->{chunk_len} = Fn->hex($_->match->cap1)) {
          next;
        }
        
        # Last chunk
        $self->{chunk_state} = "trailing_headers";
        last;
      }
      
      # Remove as much as possible from payload
      if ($self->{chunk_len} < $len) {
        $len = $self->{chunk_len};
      }
      
      $self->{buffer} .= Fn->substr(my $_ = [$self->{pre_buffer}], 0, $len, "");
      $self->{pre_buffer} = $_->[0];
      $self->{real_size} += $len;
      $self->{chunk_len} -= $len;
    }
    
    # Trailing headers
    if (($self->{chunk_state} // "") eq "trailing_headers") {
      $self->_parse_chunked_trailing_headers;
    }
    
    # Check buffer size
    if (length($self->{pre_buffer} // "") > $self->max_buffer_size) {
      $self->{state} = "finished";
      $self->{limit} = 1;
    }
  }
  
  private method _parse_chunked_trailing_headers : void () {
    
    my $pre_buffer = $self->{pre_buffer};
    $self->{pre_buffer} = undef;
    
    my $headers = $self->headers;
    $headers->parse($pre_buffer);
    
    unless ($headers->is_finished) {
      return;
    }
    
    $self->{chunk_state} = "finished";
    
    # Take care of leftover and replace Transfer-Encoding with Content-Length
    $self->{buffer} .= $headers->leftovers;
    $headers->remove("Transfer-Encoding");
    unless ($headers->content_length) {
      $headers->set_content_length($self->{real_size});
    }
  }
  
  private method _parse_headers : void () {
    
    my $headers = $self->headers;
    my $pre_buffer = $self->{pre_buffer};
    $self->{pre_buffer} = undef;
    
    $headers->parse($pre_buffer);
    unless ($headers->is_finished) {
      return;
    }
    $self->{state} = "body";
    
    # Take care of leftovers
    my $leftovers = $self->{pre_buffer} = $headers->leftovers;
    $self->{header_size} = $self->{raw_size} - length $leftovers;
    
  }

}
