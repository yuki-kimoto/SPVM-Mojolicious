# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::UserAgent extends Mojo::EventEmitter {
  version_from Mojolicious;
  
  use Mojo::UserAgent::Proxy;
  use Mojo::UserAgent::CookieJar;
  use Mojo::Transaction;
  use Mojo::Transaction::HTTP;
  use Mojo::UserAgent::Transactor;
  use Sys;
  use IO::Socket::INET;
  use IO::Socket::UNIX;
  use IO::Socket::SSL;
  
  # Enumerations
  private enum {
    READ_BUFFER_SIZE = 4086,
  }
  
  # Class Variables
  our $DEBUG : ro byte;
  INIT {
    if (length(my $_ = Sys->env("SPVM_MOJO_CLIENT_DEBUG"))) {
      $DEBUG = (byte)$_;
    }
  }
  
  # Fields
  has max_response_size : rw int;
  
  has connect_timeout : rw double;
  
  has inactivity_timeout : rw double;
  
  has request_timeout : rw double;
  
  has max_connections : rw int;
  
  has key : rw string;
  
  has ca : rw string;
  
  has cert : rw string;
  
  has insecure : rw byte;
  
  has max_redirects : rw int;
  
  has socket_options : rw object[];
  
  has tls_options : rw object[];
  
  has transactor : rw Mojo::UserAgent::Transactor;
  
  has proxy : rw Mojo::UserAgent::Proxy;
  
  has cookie_jar : rw Mojo::UserAgent::CookieJar;
  
  has keep_alive_sockets_list : List of object[]; # endpoint and socket pairs 
  
  # Undocumented Fields
  has connections_h : Hash of IO::Socket;
  
  # Class Methods
  static method new : Mojo::UserAgent () {
    
    my $self = new Mojo::UserAgent;
    
    $self->{max_response_size} = -1;
    
    $self->{connect_timeout} = length(my $_ = Sys->env("SPVM_MOJO_CONNECT_TIMEOUT")) ? (double)$_ : 0.0;
    
    $self->{inactivity_timeout} = length(my $_ = Sys->env("SPVM_MOJO_INACTIVITY_TIMEOUT")) ? (double)$_ : 0.0;
    
    $self->{request_timeout} = length(my $_ = Sys->env("SPVM_MOJO_REQUEST_TIMEOUT")) ? (double)$_ : 0.0;
    
    $self->{max_connections} = 5;
    
    $self->{key} = length(my $_ = Sys->env("SPVM_MOJO_KEY_FILE")) ? $_ : undef;
    
    $self->{ca} = length(my $_ = Sys->env("SPVM_MOJO_CA_FILE")) ? $_ : undef;
    
    $self->{cert} = length(my $_ = Sys->env("SPVM_CERT_FILE")) ? $_ : undef;
    
    $self->{proxy} = Mojo::UserAgent::Proxy->new;
    
    $self->{cookie_jar} = Mojo::UserAgent::CookieJar->new;
    
    $self->{insecure} = (byte)(length(my $_ = Sys->env("SPVM_MOJO_INSECURE")) ? (int)$_ : 0);
    
    $self->{max_redirects} = length(my $_ = Sys->env("SPVM_MOJO_MAX_REDIRECTS")) ? (int)$_ : 0;
    
    $self->{transactor} = Mojo::UserAgent::Transactor->new;
    
    $self->{keep_alive_sockets_list} = List->new(new object[0]);
    
    $self->{connections_h} = (Hash of IO::Socket)Hash->new;
    
    return $self;
  }
  
  # Instance Methods
  method get : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "GET";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method head : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "HEAD";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method delete : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "DELETE";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method options : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "OPTIONS";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method patch : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "PATCH";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method post : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "POST";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method put : Mojo::Transaction::HTTP ($url : object of string|Mojo::URL, $options : object[] = undef) {
    
    my $method = "PUT";
    
    my $tx = $self->build_tx($method, $url, $options);
    
    $tx = $self->start($tx);
    
    return $tx;
  }
  
  method build_tx : Mojo::Transaction::HTTP ($method : string, $url : object of string|Mojo::URL, $options : object[] = undef) {
    return $self->transactor->tx($method, $url, $options);
  }
  
  method start : Mojo::Transaction::HTTP ($tx : Mojo::Transaction::HTTP) {
    
    # Application server
    $self->emit(prepare => $tx);
    my $url = $tx->req->url;
    
    # TODO
    # $self->proxy->prepare($tx);
    
    # TODO
    # $self->cookie_jar->prepare($tx);
    
    my $max = $self->max_response_size;
    if ($max >= 0) {
      $tx->res->set_max_message_size($max);
    }
    $self->emit(start => $tx);
    
    my $req = $tx->req;
    
    $tx = $self->request($tx);
    
    return $tx;
  }
  
  private method request : Mojo::Transaction::HTTP ($tx : Mojo::Transaction::HTTP)  {
    
    my $method = $tx->req->method;
    
    my $url = $tx->req->url;
    
    my $options = (object[])undef;
    
    my $options_h = Hash->new($options);
    
    my $headers = (Mojo::Headers)$options_h->delete_or_default("headers", undef);
    
    my $request_timeout = $options_h->delete_or_default_double("request_timeout", $self->{request_timeout});
    
    for my $name (@{$options_h->keys}) {
      die "The \$name option is not available.";
    }
    
    unless ($headers) {
      $headers = Mojo::Headers->new;
      $tx->req->content->set_headers($headers);
    }
    
    $tx = $self->connect($tx);
    
    $self->write_request($tx);
    
    $self->read_response($tx);
    
    $tx = $self->finish($tx);
    
    return $tx;
  }
  
  method connect : Mojo::Transaction::HTTP ($tx : Mojo::Transaction::HTTP)  {
    
    my $handle = (IO::Socket)undef;
    
    # Reuse connection
    {
      my $_ = $self->transactor->endpoint($tx);
      my $proto = (string)$_->[0];
      my $host = (string)$_->[1];
      my $port = (int)$_->[2];
      my $endpoint = "$proto:$host:$port";
      
      if ($handle = $self->_dequeue($endpoint)) {
        
        if (&DEBUG) {
          warn "-- Reusing connection ($proto://$host:$port)" ;
        }
        
        unless ($tx->connection) {
          $tx->set_kept_alive(1) ;
        }
        
        $self->{connections_h}->set(Fn->to_address($tx) => $handle);
        
        $self->_process($tx);
        
        return $tx;
      }
    }
    
    # CONNECT request to proxy required
    if (my $connect_tx = $self->_connect_proxy($tx)) {
      return $connect_tx;
    }
    
    my $t = $self->transactor;
    
    my $_ = $t->peer($tx);
    my $proto = (string)$_->[0];
    my $host = (string)$_->[1];
    my $port = (int)$_->[2];
    
    unless ($proto eq "http" || $proto eq "https" || $proto eq "http+unix") {
      die "Unsupported protocol: $proto";
    }
    
    my $options_h = Hash->new;
    $options_h->set(Timeout => $self->connect_timeout);
    
    if ($proto eq "http+unix") { $options_h->set(path => $host); }
    else {
      $options_h->set(address => $host);
      $options_h->set(port => $port);
    }
    $options_h->set(socket_options => $self->socket_options);
    
    # TLS
    my $tls = $proto eq "https";
    
    my $path = $options_h->get_string("path");
    
    # UNIX domain socket
    if ($path) {
      $options_h->set(Peer => $path);
      
      $handle = (IO::Socket)IO::Socket::UNIX->new($options_h->to_array);
    }
    
    # IP socket
    else {
      $options_h->set(PeerAddr => $options_h->get_string("address"));
      $options_h->delete("address");
      $options_h->set(PeerPort => &_port($options_h));
      $options_h->delete("port");
      
      my $socket_options = (object[])$options_h->get("socket_options");
      if ($socket_options) {
        for (my $i = 0; $i < @$socket_options; $i += 2) {
          my $key = (string)$socket_options->[$i];
          my $value = $socket_options->[$i + 1];
          $options_h->set($key => $value);
        }
      }
      $options_h->delete("socket_options");
      
      if ($tls) {
        $options_h->set(tls => $tls);
        $options_h->set(tls_ca => $self->ca);
        $options_h->set(tls_cert => $self->cert);
        $options_h->set(tls_key => $self->key);
        
        $options_h->set(tls_options => $self->tls_options);
        if ($self->insecure) {
          my $tls_options = (object[])$options_h->get("tls_options") // new object[0];;
          $tls_options = Fn->merge_options($tls_options, [(object)0x00]);
          $options_h->set(tls_options => $tls_options);
        }
        
        $options_h->delete("tls_options");
        $options_h->delete("tls");
        $options_h->delete("tls_ca");
        $options_h->delete("tls_cert");
        $options_h->delete("tls_key");
        
        $handle = (IO::Socket)IO::Socket::SSL->new($options_h->to_array);
      }
      else {
        $handle = (IO::Socket)IO::Socket::IP->new($options_h->to_array);
      }
    }
    
    $self->{connections_h}->set(Fn->to_address($tx) => $handle);
    
    if (&DEBUG) {
      warn "-- Connect ($proto://$host:$port)";
    }
    
    return $tx;
  }
  
  private method write_request : void ($tx : Mojo::Transaction::HTTP) {
    
    my $req = $tx->req;
    
    my $handle = (IO::Socket)$self->{connections_h}->get(Fn->to_address($tx));
    
    my $start_line = $req->build_start_line;
    
    $handle->write($start_line);
    
    my $header_lines = $req->build_headers;
    
    $handle->write($header_lines);
    
    $handle->write("\r\n");
  }
  
  private method read_response : void ($tx : Mojo::Transaction::HTTP) {
    my $res = Mojo::Message::Response->new;
    
    my $handle = (IO::Socket)$self->{connections_h}->get(Fn->to_address($tx));
    
    while (1) {
      my $chunk = (mutable string)new_string_len &READ_BUFFER_SIZE;
      
      my $read_length = $handle->read($chunk);
      
      if ($read_length == 0) {
        $res->finish;
        last;
      }
      
      Fn->shorten($chunk, $read_length);
      
      $res->parse($chunk);
      
      if ($res->is_finished) {
        last;
      }
    }
    
    $tx->set_res($res);
  }
  
  private method _redirect : Mojo::Transaction::HTTP ($old : Mojo::Transaction::HTTP) {
    
    my $new = $self->transactor->redirect($old);
    
    unless ($new) {
      return $old;
    }
    
    unless (@{$old->redirects} < $self->max_redirects) {
      return $old;
    }
    
    $self->start($new);
    
    return $new;
  }
  
  method finish : Mojo::Transaction::HTTP ($tx : Mojo::Transaction) {
    
    # Premature connection close
    $tx->closed;
    my $res = $tx->res;
    
    $res->finish;
    
    if ($res->code == 0) {
      die "Premature connection close.";
    }
    
    if ($tx->is_websocket) {
      my $_ = $self->transactor->endpoint($tx);
      my $proto = (string)$_->[0];
      my $host = (string)$_->[1];
      my $port = (int)$_->[2];
      my $endpoint = "$proto:$host:$port";
      
      $self->_dequeue($endpoint);
      return undef;
    }
    else {
      
      my $tx = (Mojo::Transaction::HTTP)$tx;
      
      # Disable collecting the cookies temporalily
      # $self->cookie_jar->collect($tx);
      
      # Upgrade connection to WebSocket
      if (my $ws_tx = $self->transactor->upgrade($tx)) {
        $ws_tx->client_read($tx->res->content->leftovers);
        return undef;
      }
      
      # CONNECT requests always have a follow-up request
      unless (Fn->uc($tx->req->method) eq "CONNECT") {
        $self->_reuse($tx) ;
      }
      
      $tx = $self->_redirect($tx);
      
      return $tx;
    }
  }
  
  method _reuse : void ($tx : Mojo::Transaction::HTTP) {
    
    # Connection close
    my $max = $self->max_connections;
    
    # Keep connection alive
    my $keep_alive_sockets_list = $self->{keep_alive_sockets_list};
    
    while ($keep_alive_sockets_list->length && $keep_alive_sockets_list->length >= $max) {
      $keep_alive_sockets_list->shift;
    }
    
    my $_ = $self->transactor->endpoint($tx);
    my $proto = (string)$_->[0];
    my $host = (string)$_->[1];
    my $port = (int)$_->[2];
    my $endpoint = "$proto:$host:$port";
    
    $self->_dequeue($endpoint);
    
    my $handle = (IO::Socket)$self->{connections_h}->get(Fn->to_address($tx));
    $keep_alive_sockets_list->push([(object)$endpoint, $handle]);
  }
  
  method _connect_proxy : Mojo::Transaction::HTTP ($old : Mojo::Transaction::HTTP) {
    
    # Start CONNECT request
    my $new = $self->transactor->proxy_connect($old);
    
    unless ($new) {
      return undef;
    }
    
    my $tx = $self->start($new);
    
    # Real transaction
    $old->set_previous($tx);
    $old->req->set_via_proxy(0);
    
    # CONNECT failed
    if (!$tx->res->is_success || !$tx->keep_alive) {
      die "Proxy connection failed.";
    }
    
    # Start real transaction without TLS upgrade
    unless ($tx->req->url->protocol eq "https") {
      $self->_process($tx);
      return $tx;
    }
    
    # TLS upgrade before starting the real transaction
    $tx = $self->connect($old);
    
    return $tx;
  }
  
  method _process : void ($tx : Mojo::Transaction::HTTP) {
    
    my $handle = (IO::Socket)$self->{connections_h}->get(Fn->to_address($tx));
    
    $tx->set_connection(Fn->to_address($tx));
    
    unless ($handle isa IO::Socket::UNIX) {
      my $handle_ip = (IO::Socket::IP)$handle;
      $tx->set_local_address($handle_ip->sockhost);
      $tx->set_local_port($handle_ip->sockport);
      $tx->set_remote_address($handle_ip->peerhost);
      $tx->set_remote_port($handle_ip->peerport);
    }
  }
  
  static method _port : int ($options_h : Hash) {
    
    my $port = 0;
    
    if ($options_h->exists("port")) {
      $port = $options_h->get_int("port");
    }
    else {
      my $tsl = $options_h->get_or_default_int("tls", 0);
      $port = $tsl ? 443 : 80;
    }
    
    return $port;
  }
  
  method _dequeue : IO::Socket ($endpoint : string)  {
    
    my $keep_alive_sockets_list = $self->{keep_alive_sockets_list};
    
    for (my $i = 0; $i < $keep_alive_sockets_list->length; $i++) {
      my $keep_alive_socket = (object[])$keep_alive_sockets_list->get($i);
      my $my_endpoint = (string)$keep_alive_socket->[0];
      my $handle = (IO::Socket)$keep_alive_socket->[1];
      
      if ($endpoint eq $my_endpoint) {
        $keep_alive_sockets_list->remove($i);
        return $handle;
      }
    }
    
    return undef;
  }
  
  private static method SSL_cert_default : string () {
    
    my $SSL_cert_default = <<'EOS';
-----BEGIN CERTIFICATE-----
MIIEpDCCAowCCQD2f63fTFHflTANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAls
b2NhbGhvc3QwHhcNMTkwNjI4MjExNDI5WhcNMzkwNjIzMjExNDI5WjAUMRIwEAYD
VQQDDAlsb2NhbGhvc3QwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQC2
lW4DOBswU1YJkekNF6c4b1VVcpOvtqsLHhTxUz538bffcvhI2vv+aCltG6g5mlvJ
wo5NEu9l0ZG5TD9Ca4+WOOisVWrAI/i2YxXFQLOdjhKRBB1BvrOxSaFOuCXz9+cj
VRo0R8Dq3k+1aSy93Yf+fq9pL7LFJaUOlxcU2FOM+HW9FYPeVbqCzYqpPJoaBnwN
tQkQg7i8ufbeMS0bCcFpfTSV4pCgpWg1L9z6cVmBHtxc4MQv7rTTal+BF/iZDfDk
qTNFJpuK7IGtSVB5laTcssYKGuY5QhN5BBPoGEMP3f0KiZmgMOUqwR6fMUiidacG
iSIcgy05uOJyZ4oroqOzesz8nm2jH1eRPys2WLLFd801GKOZZE2LvNhCVzNIE0s1
Rr8yyWBU9jbjQuxlTAtyMUKKOqG9qsfEnKOsl9T9/pFcpJjad3spwhQSWhWEPWca
avw0CGVaGQ3nYmr9aJ9vpGBIiIsLQOPTzpOOPCDauMFpAPOoKnvIu+iz3Z8sUrMu
Ld+aT/3yxpAtNkmVv5A951XyFt9WDXF7jZOMHdOSZPvvI/Yn7joJUzfP9d7TLKjz
Xu+dzQnrAN3xuAXuy+jBpMIl3OPzwER6a8v7gUKRA/achNlIeOOmBdNn1cyHddcn
k6wiaXHJlFsl8X6IjCs9ILwv6H+ZGq/5QNU1Nrv5kQIDAQABMA0GCSqGSIb3DQEB
CwUAA4ICAQCo3xjINrsIQYvpVwVLpcO1p+oE5NV0ipA30JT+89Dn+vCejel9NzxT
msuD9aQSiNaB4znlIDqux4bSKkcRXDGINiaGNIDNXOtO/787LXjUZlljPVVHoPWi
hxgwc0nUHz3l/YvoXMKHI8blPkIhXl7xgKSuKQu05evjd//kpdHs1h+7b2vtCB0/
VoYTX/NrIX5oMYCvHkZEypQbDJ3VeAkOhRJ4efGEuEskPRm0+eDSL7elas/65saZ
l8vgkKDHZ9K0pd8JXc7EKmg3OBS22C5Lfhhy8AgqMa6R9p54oE4rH4yFaTe3BzFL
xSA6HWqC987L2OCFr2LJ8hZpawDF1otukGHDou/5+4Q03EZz10RuZfzlCLO5DXzW
Q28AtcCxz40n9o1giWzEj4LSYW4qsrpr5cNIhCqMzGPwp2OyS/TazPNJGoT8WKFU
Kr+Y/prfkXAwgVkXlUSiu7ukiYslSM4BbYWHDxd75Iv4GzzhUirSuJKN95RglxR8
XsJFlQwZ/tLvpflqb1Z8gPIV/4avtF+ybdx1AvqYViBQDf6GmLkM3p6Nwfj1LnCn
kFhnqY80gyVjbZXvp9ClypExzgz55/o2ZIijznCaDkFSVBdv+aUIzl98IicZxHqP
WREB+GMKmkaYrfKqlliQKdkXd2mXP/N8rv7SJEzHHpGRKBXsIAalrA==
-----END CERTIFICATE-----
EOS
    
  }
  
  private static method SSL_key_default : string () {
    
    my $SSL_key_default = <<'EOS';
-----BEGIN PRIVATE KEY-----
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
0N/URKPaZ8Z9V/c15kNhIZBgJhOoVg==
-----END PRIVATE KEY-----
EOS
    
    return $SSL_key_default;
  }
}
