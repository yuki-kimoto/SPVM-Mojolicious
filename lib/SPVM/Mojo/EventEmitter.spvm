# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojo::EventEmitter {
  version_from Mojolicious;
  
  use Mojo::EventEmitter::Callback;
  
  # Undocumeted Fields
  has events : Hash of List of Mojo::EventEmitter::Callback;
  
  # Instance Methods
  method catch : void ($cb : Mojo::EventEmitter::Callback) {
    $self->on(error => $cb);
  }
  
  method emit : void ($name : string, $arg1 : object = undef, $arg2 : object = undef, $arg3 : object = undef) {
    
    my $events = $self->events;
    
    if (my $cbs_list = (List of Mojo::EventEmitter::Callback)$events->get($name)) {
      for (my $i = 0; $i < $cbs_list->length; $i++) {
        my $cb = (Mojo::EventEmitter::Callback)$cbs_list->get($i);
        
        $cb->($self, $arg1, $arg2, $arg3);
      }
    }
    else {
      if ($name eq "error") {
        die "emit error";
      }
    }
  }
  
  method has_subscribers : int ($name : string) {
    
    my $events = $self->events;
    
    return !!$events->get($name);
  }
  
  method on : void ($name : string, $cb : Mojo::EventEmitter::Callback) {
    
    my $events = $self->events;
    
    my $cbs_list = (List of Mojo::EventEmitter::Callback)$events->get($name);
    
    unless ($cbs_list) {
      $cbs_list = List->new(new Mojo::EventEmitter::Callback[0]);
      $events->set($name, $cbs_list);
    }
    
    $cbs_list->push($cb);
  }
  
  method once : Mojo::EventEmitter::Callback ($name : string, $cb : Mojo::EventEmitter::Callback) {
    
    my $wrapper = [$that : Mojo::EventEmitter = $self, $cb : Mojo::EventEmitter::Callback] method : void ($name : string) {
      $that->unsubscribe($name => $self);
      $cb->($that);
    };
    weaken $wrapper->{that};
    
    $self->on($name => $wrapper);
    
    return $wrapper;
  }
  
  method subscribers : Mojo::EventEmitter::Callback[] ($name : string) {
    
    my $events = $self->events;
    
    my $cbs_list = (List of Mojo::EventEmitter::Callback)$events->get($name);
    
    unless ($cbs_list) {
      my $new_cbs_list = List->new(new Mojo::EventEmitter::Callback[0]);
      $events->set($name => $new_cbs_list);
      $cbs_list = $new_cbs_list;
    }
    
    my $cbs = (Mojo::EventEmitter::Callback[])$cbs_list->to_array;
    
    return $cbs;
  }
  
  method unsubscribe : void ($name : string, $cb : Mojo::EventEmitter::Callback = undef) {
    
    my $events = $self->events;
    
    # One
    if ($cb) {
      my $cbs_list = (List of Mojo::EventEmitter::Callback)$events->get($name);
      
      if ($cbs_list) {
        for (my $i = 0; $i < $cbs_list->length; $i++) {
          my $cur_cb = (Mojo::EventEmitter::Callback)$cbs_list->get($i);
          if ($cb == $cur_cb) {
            $cbs_list->remove($i);
            last;
          }
        }
      }
    }
    
    # All
    else {
      $events->delete($name);
    }
  }
  
  private method events : Hash of Mojo::EventEmitter::Callback () {
    
    unless ($self->{events}) {
      $self->{events} = Hash->new;
    }
    
    return $self->{events};
  }
  
}

