# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Mojo::Message::Response extends Mojo::Message {
  version_from Mojolicious;
  
  use Mojo::Cookie::Response;
  use Mojo::Date;
  
  # Class Variables
  our $MESSAGES_H : Hash of string;
  INIT {
    $MESSAGES_H = Hash->new({
      "100" => "Continue",
      "101" => "Switching Protocols",
      "102" => "Processing",                         # RFC 2518 (WebDAV)
      "103" => "Early Hints",                        # RFC 8297
      "200" => "OK",
      "201" => "Created",
      "202" => "Accepted",
      "203" => "Non-Authoritative Information",
      "204" => "No Content",
      "205" => "Reset Content",
      "206" => "Partial Content",
      "207" => "Multi-Status",                       # RFC 2518 (WebDAV)
      "208" => "Already Reported",                   # RFC 5842
      "226" => "IM Used",                            # RFC 3229
      "300" => "Multiple Choices",
      "301" => "Moved Permanently",
      "302" => "Found",
      "303" => "See Other",
      "304" => "Not Modified",
      "305" => "Use Proxy",
      "307" => "Temporary Redirect",
      "308" => "Permanent Redirect",                 # RFC 7538
      "400" => "Bad Request",
      "401" => "Unauthorized",
      "402" => "Payment Required",
      "403" => "Forbidden",
      "404" => "Not Found",
      "405" => "Method Not Allowed",
      "406" => "Not Acceptable",
      "407" => "Proxy Authentication Required",
      "408" => "Request Timeout",
      "409" => "Conflict",
      "410" => "Gone",
      "411" => "Length Required",
      "412" => "Precondition Failed",
      "413" => "Request Entity Too Large",
      "414" => "Request-URI Too Long",
      "415" => "Unsupported Media Type",
      "416" => "Request Range Not Satisfiable",
      "417" => "Expectation Failed",
      "418" => "I'm a teapot",                       # RFC 2324 :)
      "421" => "Misdirected Request",                # RFC 7540
      "422" => "Unprocessable Entity",               # RFC 2518 (WebDAV)
      "423" => "Locked",                             # RFC 2518 (WebDAV)
      "424" => "Failed Dependency",                  # RFC 2518 (WebDAV)
      "425" => "Too Early",                          # RFC 8470
      "426" => "Upgrade Required",                   # RFC 2817
      "428" => "Precondition Required",              # RFC 6585
      "429" => "Too Many Requests",                  # RFC 6585
      "431" => "Request Header Fields Too Large",    # RFC 6585
      "451" => "Unavailable For Legal Reasons",      # RFC 7725
      "500" => "Internal Server Error",
      "501" => "Not Implemented",
      "502" => "Bad Gateway",
      "503" => "Service Unavailable",
      "504" => "Gateway Timeout",
      "505" => "HTTP Version Not Supported",
      "506" => "Variant Also Negotiates",            # RFC 2295
      "507" => "Insufficient Storage",               # RFC 2518 (WebDAV)
      "508" => "Loop Detected",                      # RFC 5842
      "509" => "Bandwidth Limit Exceeded",           # Unofficial
      "510" => "Not Extended",                       # RFC 2774
      "511" => "Network Authentication Required"     # RFC 6585
    });
  }
  
  # Fields
  has code: rw int;
  
  has message : rw string;
  
  has max_message_size : rw int
    get {
      unless (exists $self->{max_message_size}) {
        $self->{max_message_size} = length(my $_ = Sys->env("SPVM_MOJO_MAX_MESSAGE_SIZE")) ? (int)$_ : 2147483647;
      }
      
      return $self->{max_message_size};
    }  
  ;
  
  # Undocumented Fields
  has start_buffer : string;
  
  # Class Methods
  static method new : Mojo::Message::Response () {
    
    my $self = new Mojo::Message::Response;
    
    $self->SUPER::init;
    
    return $self;
  }
  
  # Instance Methods
  method cookies : Mojo::Cookie::Response[] () {
    
    # Parse cookies
    my $headers = $self->headers;
    
    return Mojo::Cookie::Response->new->parse($headers->get_set_cookie);
  }
  
  method set_cookies : void ($name : string, $cookies : object[] of Mojo::Cookie::Response|object[]) {
    
    # Add cookies
    my $headers = $self->headers;
    for my $cookie (@$cookies) {
      
      my $cookie_ = (Mojo::Cookie::Response)undef;
      if ($cookie isa Mojo::Cookie::Response) {
        $cookie_ = (Mojo::Cookie::Response)$cookie;
      }
      elsif ($cookie isa object[]) {
        $cookie_ = Mojo::Cookie::Response->new((object[])$cookie);
      }
      else {
        die "The element of the cookies \$cookies must be a Mojo::Cookie::Response or object[] object.";
      }
      
      $headers->add("Set-Cookie" => $cookie_->to_string);
    }
    
  }
  
  method default_message : string ($code : int = -1) {
    if ($code < 0) {
      $code = $self->code;
      if ($code < 0) {
        $code = 404;
      }
    }
    
    my $message = $MESSAGES_H->get_string($code) // "";
    
    return $message;
  }
  
  method extract_start_line : int ($bufref : string[]) {
    
    # We have a full response line
    my $_ = Re->s($bufref, "^(.*?)\x0d?\x0a", "");
    unless ($_) {
      return 0;
    }
    my $start_line = $_->match->cap1;
    
    my $_ = Re->m($start_line, "^\s*HTTP/(\d\.\d)\s+(\d\d\d)\s*(.+)?$");
    unless ($_) {
      die "Bad response start-line";
    }
    
    my $version = $_->cap1;
    my $code = $_->cap2;
    my $message = $_->cap3;
    
    my $content = $self->content;
    $self->{code} = (int)$code;
    if ($self->is_empty) {
      $content->set_skip_body(1);
    }
    
    if (!$content->auto_decompress) {
      
    }
    
    eval { $content->auto_decompress; }
    if ($@) {
      $content->set_auto_decompress(1);
    }
    
    eval { $content->auto_relax; }
    if ($@) {
      $content->set_auto_relax(1);
    }
    
    $self->{version} = $version;
    $self->{message} = $message;
    
    return 1;
  }

  method fix_headers : void () {
    
    if ($self->{fix}) {
      return;
    }
    
    $self->SUPER::fix_headers;
    
    # Date
    my $headers = $self->headers;
    unless ($headers->date) {
      $headers->set_date(Mojo::Date->new->to_string) ;
    }
    
    # RFC 7230 3.3.2
    if ($self->is_empty) {
      $headers->remove("Content-Length") ;
    }
  }
  
  method get_start_line_chunk : string ($offset : int) {
    
    $self->_start_line;
    $self->emit(progress => "start_line", $offset);
    
    return Fn->substr($self->{start_buffer}, $offset, 131072);
  }
  
  method is_client_error : int ($code : int) { return $self->_status_class([400]); }
  
  method is_empty : int () {
    
    my $self_code = $self->code;
    
    unless ($self_code > 0) {
      return 0;
    }
    
    return $self->is_info || $self_code == 204 || $self_code == 304;
  }
  
  method is_error : int () { return $self->_status_class([400, 500]); }
  method is_info : int () { return $self->_status_class([100]); }
  method is_redirect : int () { return $self->_status_class([300]); }
  method is_server_error : int () { return $self->_status_class([500]); }
  
  method is_success : int () { return $self->_status_class([200]); }
  
  method start_line_size : int () { return length ($self->_start_line, $self->{start_buffer}); }
  
  private method _start_line : void () {
    
    if ($self->{start_buffer}) {
      return;
    }
    
    my $code = (my $_ = $self->code) != 0 ? $_ : 404;
    
    my $msg = $self->message // $self->default_message;
    
    my $version = $self->version;
    $self->{start_buffer} = "HTTP/$version $code $msg\x0d\x0a";
  }
  
  private method _status_class : int ($codes : int[]) {
    
    my $self_code = $self->code;
    
    unless ($self_code > 0) {
      return 0;
    }
    
    for my $code (@$codes) {
      if ($self_code >= $code && $self_code < $code + 100) {
        return 1;
      }
    }
    
    return 0;
  }
  
}
