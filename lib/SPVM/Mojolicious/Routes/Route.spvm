# Copyright (c) 2025 Yuki Kimoto
# MIT License

class Mojolicious::Routes::Route {
  version_from Mojolicious;
  
  use Mojo::Util;
  use Mojolicious::Routes::Pattern;
  
  # Class Variables
  # Reserved stash values
  our $RESERVED : Hash of string;
  INIT {
    
    my $reserved = [
      "action",
      "app",
      "cb",
      "controller",
      "data",
      "extends",
      "format",
      "handler",
      "inline",
      "json",
      "layout",
      "namespace",
      "path",
      "status",
      "template",
      "text",
      "variant",
    ];
    
    $RESERVED = Hash->new_from_keys($reserved => 1);
  }
  
  # Fields
  has inline : rw byte;
  
  has partial : rw byte;
  
  has children : rw Mojolicious::Routes::Route[]
    get {
      return (Mojolicious::Routes::Route[])$self->children_list->to_array;
    }
    set {
      $self->{children_list} = List->new($_);
    }
  ;
  
  has children_list : rw List of Mojolicious::Routes::Route
    get {
      unless (exists $self->{children}) {
        $self->{children_list} = List->new(new Mojolicious::Routes::Route[0]);
      }
      
      return $self->{children_list};
    }
  ;
  
  has parent : rw Mojolicious::Routes::Route
    get {
      unless (exists $self->{parent}) {
        $self->{parent} = undef;
      }
      
      return $self->{parent};
    }
    set {
      $self->{parent} = $_;
      weaken $self->{parent};
    }
  ;
  
  has pattern : rw Mojolicious::Routes::Pattern
    get {
      unless (exists $self->{pattern}) {
        $self->{pattern} = Mojolicious::Routes::Pattern->new;
      }
      
      return $self->{pattern};
    }
  ;
  
  has name : rw string
    set {
      $self->{name} = $_;
      
      $self->{custom} = 1;
    }
  ;
  
  has has_websocket : ro int
    get {
      unless (exists $self->{has_websocket}) {
        my $chain_list = $self->_chain;
        
        my $has_websocket = 0;
        for (my $i = 0; $i < $chain_list->length; $i++) {
          my $child = (Mojolicious::Routes::Route)$chain_list->get($i);
          
          if ($child->is_websocket) {
            $has_websocket = 1;
          }
        }
      }
      
      return $self->{has_websocket};
    }
  ;

  # Undocumented Fields
  has websocket : byte;
  
  has custom : string;
  
  # Instance Methods
  method is_reserved : int ($name : string) {
    die "Not implemeneted.";
  }
  
  method any : Mojolicious::Routes::Route ($args : object...) {
    
    my $methods = (string[])undef;
    my $shift = 0;
    if ($args->[0] isa string[]) {
      $methods = (string[])$args->[0];
      $shift = 1;
    }
    else {
      $methods = new string[0];
    }
    
    $args = $shift ? (object...)Array->copy_object_address($args, 1, @$args - 1) : $args;
    
    return $self->_generate_route($methods, $args);
  }
  
  method delete : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(DELETE => $args);
  }
  
  method get : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(GET => $args);
  }
  
  method options : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(OPTIONS => $args);
  }
  
  method patch : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(PATCH => $args);
  }
  
  method post : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(POST => $args);
  }
  
  method put : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(PUT => $args);
  }
  
  method under : Mojolicious::Routes::Route ($args : object...) {
    return $self->_generate_route(under => $args);
  }
  
  method websocket : Mojolicious::Routes::Route ($args : object...) {
    
    my $route = $self->get($args);
    
    $route->{websocket} = 1;
    
    return $route;
  }
  
  private method _generate_route : Mojolicious::Routes::Route ($method : object of string|string[], $args : object[]) {
    die "TODO";
  }

  method add_child : void ($route : Mojolicious::Routes::Route)  {
    
    $route->remove;
    
    $route->set_parent($self);
    
    $self->children_list->push($route);
    
    $route->pattern->set_types($self->root->types);
  }
  
  method remove : void () {
    
    my $parent = $self->parent;
    
    unless ($parent) {
      return;
    }
    
    my $new_children_list = List->new(new Mojolicious::Routes::Route[0]);
    for (my $i = 0; $i < $parent->children_list->length; $i++) {
      my $child = $parent->children_list->get($i);
      
      unless ($child == $self) {
        $new_children_list->push($child);
      }
    }
    $parent->set_children_list($new_children_list);
    
    $self->set_parent(undef);
  }
  
  method root : Mojolicious::Routes () {
    
    return (Mojolicious::Routes)$self->_chain->get(0);
  }
  
  method _chain : List of Mojolicious::Routes::Route () {
    
    my $chain = List->new([$self]);
    
    while ($self = $self->parent) {
      $chain->unshift($self);
    }
    
    return $chain;
  }
  
  method find : Mojolicious::Routes::Route ($name : string) {
    return (Mojolicious::Routes::Route)$self->_index->get($name);
  }
  
  private method _index : Hash () {
    
    my $auto = Hash->new;
    
    my $custom = Hash->new;
    
    my $children_list = $self->children_list->clone;
    
    while (my $child = (Mojolicious::Routes::Route)$children_list->shift) {
      if   ($child->has_custom_name) {
        unless ($custom->get($child->name)) {
          $custom->set($child->name, $child);
        }
      }
      else {
        unless ($auto->get($child->name)) {
          $auto->set($child->name, $child);
        }
      }
      
      $children_list->push_($child->children);
    }
    
    my $ret = Hash->new;
    
    for my $key (@{$auto->keys}) {
      $ret->set($key, $auto->get($key));
    }
    
    for my $key (@{$custom->keys}) {
      $ret->set($key, $custom->get($key));
    }
    
    return $ret;
  }
  
  method has_custom_name : int () {
    return !!$self->{custom};
  }
  
  method is_websocket : int () {
    
    return !!$self->{websocket};
  }

}

__END__

TODO

sub is_endpoint { $_[0]->inline ? undef : !@{$_[0]->children} }

sub is_reserved { !!$RESERVED{$_[1]} }

sub methods {
  my $self = shift;
  return $self->{methods} unless @_;
  my $methods = [map uc($_), @{ref $_[0] ? $_[0] : [@_]}];
  $self->{methods} = $methods if @$methods;
  return $self;
}

sub parse {
  my $self = shift;
  $self->{name} = $self->pattern->parse(@_)->unparsed // '';
  $self->{name} =~ s/\W+//g;
  return $self;
}

sub render {
  my ($self, $values) = @_;
  my $path = join '', map { $_->pattern->render($values, !@{$_->children} && !$_->partial) } @{$self->_chain};
  return $path || '/';
}

sub requires {
  my $self = shift;

  # Routes with conditions can't be cached
  return $self->{requires} unless @_;
  my $conditions = ref $_[0] eq 'ARRAY' ? $_[0] : [@_];
  return $self unless @$conditions;
  $self->{requires} = $conditions;
  $self->root->cache->max_keys(0);

  return $self;
}

sub suggested_method {
  my $self = shift;

  my %via;
  for my $route (@{$self->_chain}) {
    next unless my @via = @{$route->methods // []};
    %via = map { $_ => 1 } keys %via ? grep { $via{$_} } @via : @via;
  }

  return 'POST' if $via{POST} && !$via{GET};
  return $via{GET} ? 'GET' : (sort keys %via)[0] || 'GET';
}

sub to {
  my $self = shift;

  my $pattern = $self->pattern;
  return $pattern->defaults unless @_;
  my ($shortcut, %defaults) = Mojo::Util::_options(@_);

  if ($shortcut) {

    # Application
    if (ref $shortcut || $shortcut =~ /^[\w:]+$/) { $defaults{app} = $shortcut }

    # Controller and action
    elsif ($shortcut =~ /^([\w\-:]+)?\#(\w+)?$/) {
      $defaults{controller} = $1 if defined $1;
      $defaults{action}     = $2 if defined $2;
    }
  }

  @{$pattern->defaults}{keys %defaults} = values %defaults;

  return $self;
}

sub to_string {
  join '', map { $_->pattern->unparsed // '' } @{shift->_chain};
}

sub _generate_route {
  my ($self, $methods, @args) = @_;

  my (@conditions, @constraints, %defaults, $name, $pattern);
  while (defined(my $arg = shift @args)) {

    # First scalar is the pattern
    if (!ref $arg && !$pattern) { $pattern = $arg }

    # Scalar
    elsif (!ref $arg && @args) { push @conditions, $arg, shift @args }

    # Last scalar is the route name
    elsif (!ref $arg) { $name = $arg }

    # Callback
    elsif (ref $arg eq 'CODE') { $defaults{cb} = $arg }

    # Constraints
    elsif (ref $arg eq 'ARRAY') { push @constraints, @$arg }

    # Defaults
    elsif (ref $arg eq 'HASH') { %defaults = (%defaults, %$arg) }
  }

  my $route = $self->_route($pattern, @constraints)->requires(\@conditions)->to(\%defaults);
  $methods eq 'under' ? $route->inline(1) : $route->methods($methods);

  return defined $name ? $route->name($name) : $route;
}

sub _route {
  my $self = shift;

  my $route       = $self->add_child(__PACKAGE__->new->parse(@_))->children->[-1];
  my $new_pattern = $route->pattern;
  croak qq{Route pattern "@{[$new_pattern->unparsed]}" contains a reserved stash value}
    if grep { $self->is_reserved($_) } @{$new_pattern->placeholders};

  my $old_pattern = $self->pattern;
  my $constraints = $old_pattern->constraints;
  $new_pattern->constraints->{format} //= $constraints->{format} if exists $constraints->{format};
  my $defaults = $old_pattern->defaults;
  $new_pattern->defaults->{format} //= $defaults->{format} if exists $defaults->{format};

  return $route;
}


