# Copyright (c) 2025 Yuki Kimoto
# MIT License

class TestUtil::HTTP::Tiny::Daemon {
  version_from TestUtil::HTTP::Tiny;
  
  use IO::Socket::IP;
  use IO;
  use Re;
  use Sys::Time::Tm;
  
  use Mojo::Date;
  use Mojo::Message::Request;
  use Mojo::Message::Response;
  
  our $CRLF : string;
  
  our $HTTP_VERSION : string;
  
  INIT {
    $CRLF = "\015\012";
    $HTTP_VERSION = "HTTP/1.1";
  }
  
  has io_socket : IO::Socket;
  
  has request : Mojo::Message::Request;
  
  has response : ro Mojo::Message::Response;
  
  # Private Fields
  
  # Class Methods
  static method new : TestUtil::HTTP::Tiny::Daemon ($options : object[]) {
    
    my $options_h = Hash->new($options);
    
    my $new_options = $options;
    unless ($options_h->exists("Listen")) {
      $new_options = Fn->merge_options($new_options, {Listen => 5});
    }
    
    my $io_socket = IO::Socket::IP->new($new_options);
    
    my $daemon = new TestUtil::HTTP::Tiny::Daemon;
    
    $daemon->{io_socket} = $io_socket;
    
    return $daemon;
  }
  
  # Instance Mehtods
  method accept : TestUtil::HTTP::Tiny::Daemon () {
    
    my $io_socket = $self->{io_socket};
    
    my $accepted_socket = $io_socket->accept;
    
    my $daemon = new TestUtil::HTTP::Tiny::Daemon;
    
    $daemon->{io_socket} = $accepted_socket;
    
    return $daemon;
  }
  
  method send_response : void ($res : Mojo::Message::Response) {
    
    my $io_socket = $self->{io_socket};
    
    unless ($res) {
      die "The HTTP response \$res must be defined.";
    }
    
    my $content = $res->content_v0;
    
    my $chunked = 0;
    
    my $status = $res->code;
    
    my $message = $res->message;
    
    my $request = $self->{request};
    
    my $request_has_data_callback = 0;
    
    if (Re->m($status, "^(1\d\d|[23]04)$")) {
        $res->headers->remove("Content-Length");
        $content = "";
    }
    elsif ($request->method eq "HEAD") {
      
    }
    elsif ($request_has_data_callback) {
      $res->headers->add("Transfer-Encoding" => "chunked");
      $chunked++;
    }
    elsif (length($content)) {
      $res->headers->add("Content-Length" => length($content));
    }
    
    my $start_line = $res->build_start_line;
    $io_socket->write($start_line);
    
    my $http_date = Mojo::Date->new;
    $http_date->set_epoch(Sys->time);
    my $http_date_string = $http_date->to_datetime;
    
    my $data_header = "Date: $http_date_string$CRLF";
    $io_socket->write($data_header);
    
    my $headers_as_string = $res->build_headers;
    $io_socket->write($headers_as_string);
    $io_socket->write($CRLF);
    
    if ($self->{request}->method eq "HEAD") {
      # no content
    }
    elsif (length $content) {
      $io_socket->write($content);
    }
    
  }
  
  private method send_error : void ($status : int, $error : string = undef) {
    
    my $io_socket = $self->{io_socket};
    
    my $res = Mojo::Message::Response->new;
    
    $res->set_code($status);
    
    my $status_message = $res->message;
    
    my $start_line = $res->build_start_line;
    $io_socket->write($start_line);
    
    my $http_date = Mojo::Date->new;
    $http_date->set_epoch(Sys->time);
    my $http_date_string = $http_date->to_datetime;
    
    my $data_header = "Date: $http_date_string$CRLF";
    $io_socket->write($data_header);
    
    my $content = 
"<title>$status $status_message</title>
<h1>$status $status_message</h1>
$error
";
    $io_socket->write("Content-Type:text/html$CRLF");
    my $content_length = length $content;
    if ($content_length) {
      $io_socket->write("Content-Length:$content_length$CRLF");
    }
    $io_socket->write($CRLF);
    
    my $request = $self->{request};
    
    unless ($request->method eq "HEAD") {
      $io_socket->write($content);
    }
    
  }
  
  private static method _http_version_number : int ($http_version : string) {
    
    my $http_version_number = 0;
    if (my $match = Re->m($http_version, ["^(?:HTTP/)?(\d+)\.(\d+)$", "i"])) {
      $http_version_number = Fn->to_int($match->cap1) * 1000 + Fn->to_int($match->cap2);
    }
    
    return $http_version_number;
  }
  
  method get_request : Mojo::Message::Request () {
    
    my $tmp_buffer = (mutable string)new_string_len 2048;
    
    my $io_socket = $self->{io_socket};
    
    my $buf = StringBuffer->new;
    
    my $timeout = $io_socket->timeout;
    
    while (1) {
      my $read_length = $io_socket->read($tmp_buffer);
      
      if ($read_length == 0) {
        last;
      }
      
      $buf->push($tmp_buffer, $read_length);
      
      Re->s($buf, "^(?:\015?\012)+", "");
      
      if (Re->m($buf, "\012")) {
        if (Re->m($buf, "\w+[^\012]+HTTP\/\d+\.\d+\015?\012")) {
          if (Re->m($buf, "\015?\012\015?\012")) {
            last;
          }
          elsif ($buf->length > 16 * 1024) {
            # $self->send_error(413);
            die "Very long header";
          }
        }
        else {
          last;
        }
      }
      elsif ($buf->length > 16 * 1024) {
        die "414 Very long first line";
      }
    }
    
    my $request = (Mojo::Message::Request)undef;
    if (my $replace_info = Re->s($buf, "^(\S+)[ \t]+(\S+)(?:[ \t]+(HTTP\/\d+\.\d+))?[^\012]*\012", "")) {
      my $match = $replace_info->match;
      
      my $method = $match->cap1;
      my $url_string    = $match->cap2;
      my $http_version  = $match->cap3;
      
      my $url = TestUtil::HTTP::Tiny::URL->new($url_string);
      
      $request = Mojo::Message::Request->new({method => $method, url => $url});
      
      my $httpd_version_number = &_http_version_number($http_version);
      
      unless ($httpd_version_number < &_http_version_number("HTTP/1.1")) {
        die "505 HTTP Version Not Supported";
      }
    }
    else {
      die "400 Bad request line: " . $buf->to_string;
    }
    
    # Headers
    my $key = (string)undef;
    my $val = (string)undef;
    while (my $replace_info = Re->s($buf, "^([^\012]*)\012", "")) {
      
      my $match = $replace_info->match;
      
      my $header_line = $match->cap1;
      
      my $header_line_buffer = StringBuffer->new($header_line);
      
      Re->s($header_line_buffer, "\015$", "");
      
      if (my $match = Re->m($header_line_buffer, "^([^:\s]+)\s*:\s*(.*)")) {
        if ($key) {
          $request->headers->add($key, $val);
        }
        
        $key = $match->cap1;
        $val = $match->cap2;
      }
      elsif (my $match = Re->m($header_line_buffer, "^\s+(.*)")) {
        $val .= " " . $match->cap1;
      }
      else {
        last;
      }
    }
    if ($key) {
      $request->headers->add($key, $val);
    }
    
    if ($request->method eq "HEAD") {
      return $request;
    }
    
    # Find out how much content to read
    my $tr_enc  = $request->headers->header("Transfer-Encoding");
    my $ct_type = $request->headers->header("Content-Type");
    my $ct_len  = $request->headers->header("Content-Length");
    
    if ($tr_enc && Fn->lc($tr_enc) eq "chunked") {
      my $body = "";
      while (1) {
        if (my $replace_info = Re->s($buf, "^([^\012]*)\012", "")) {
          my $match = $replace_info->match;
          
          my $chunk_head = $match->cap1;
          
          my $size = 0;
          if (my $match = Re->m($chunk_head, "^([0-9A-Fa-f]+)")) {
            $size = Fn->to_int($match->cap1);
          }
          else {
            die "400 Bad chunk header $chunk_head";
          }
          
          unless ($size > 0) {
            last;
          }
          
          my $missing = $size - $buf->length + 2;    # 2=CRLF at chunk end
          
          while ($missing > 0) {
            my $read_length = $io_socket->read($tmp_buffer);
            unless ($read_length > 0) {
              return $request;
            }
            $missing -= $read_length;
          }
          $body .= Fn->substr($buf->to_string, 0, $size);
          
          $buf->replace(0, $size + 2, "");
        }
        else {
          my $read_length = $io_socket->read($tmp_buffer);
          unless ($read_length > 0) {
            return $request;
          }
        }
      }
      $request->set_content_buffer(StringBuffer->new($body));
      
      $request->headers->remove("Transfer-Encoding");
      
      $request->headers->remove("Content-Length");
      $request->headers->add("Content-Length", length($body));
      
      # Traler Headers
      my $key = (string)undef;
      my $val = (string)undef;
      while (my $replace_info = Re->s($buf, "^([^\012]*)\012", "")) {
        
        my $match = $replace_info->match;
        
        my $header_line = $match->cap1;
        
        my $header_line_buffer = StringBuffer->new($header_line);
        
        Re->s($header_line_buffer, "\015$", "");
        
        if (my $match = Re->m($header_line_buffer, "^([^:\s]+)\s*:\s*(.*)")) {
          if ($key) {
            $request->headers->add($key, $val);
          }
          
          $key = $match->cap1;
          $val = $match->cap2;
        }
        elsif (my $match = Re->m($header_line_buffer, "^\s+(.*)")) {
          $val .= " " . $match->cap1;
        }
        else {
          last;
        }
      }
      if ($key) {
        $request->headers->add($key, $val);
      }
    }
    elsif ($tr_enc) {
      die "501 Unknown transfer encoding '$tr_enc'";
    }
    elsif ($ct_len) {
      
      if (Re->m($ct_len, ",")) {
        die "400 Invalid Content-Length'";
      }
      
      my $content_length_long = 0L;
      eval { $content_length_long = Fn->to_long($ct_len); }
      if ($@) {
        die "400 Invalid Content-Length'";
      }
      
      my $total_read_length = 0;
      while (1) {
        
        if ($total_read_length > $content_length_long) {
          last;
        }
        
        my $read_length = $io_socket->read($tmp_buffer);
        
        $total_read_length = $read_length;
        
        if ($read_length > 0) {
          $buf->push($tmp_buffer, $read_length);
        }
        else {
          last;
        }
      }
      
      $buf->set_length((int)$content_length_long);
      
      $request->set_content_buffer($buf);
    }
    
    return $request;
  }
}

